{"version":3,"sources":["app/application.js","app/collections/count_list.js","app/initialize.js","app/lib/base_view.js","app/lib/view_collection.js","app/lib/view_helper.js","app/models/count.js","app/router.js","app/views/count-editor/count_editor_view.js","app/views/count-editor/templates/count_editor.jade","app/views/home/count_list_view.js","app/views/home/count_row_view.js","app/views/home/home_view.js","app/views/home/templates/count_row.jade","app/views/home/templates/home.jade","app/views/menu/count_list_view.js","app/views/menu/count_row_view.js","app/views/menu/menu_view.js","app/views/menu/templates/count_row.jade","app/views/menu/templates/menu.jade"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApFA;AAAA;ACAA;AAAA;AACA;AADA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9EA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA","file":"public/javascripts/app.js","sourcesContent":["\n// Application bootstrapper.\nvar Application = {\n\tinitialize: function () {\n\t\tvar Router = require('./router');\n\n\t\t// Ideally, initialized classes should be kept in controllers & mediator.\n\t\t// If you're making big webapp, here's more sophisticated skeleton\n\t\t// https://github.com/paulmillr/brunch-with-chaplin\n\n\n\t\tthis.router = new Router();\n\n\n\t\tif (typeof Object.freeze === 'function') {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n};\n\nmodule.exports = Application;\n","var Count = require('../models/count');\n\nvar CountList = Backbone.Collection.extend({\n\tmodel: Count,\n\turl: 'countlist',\n\n});\n\nmodule.exports = CountList;\n","var application = require('application');\n\n$(function () {\n\tapplication.initialize();\n\tBackbone.history.start();\n});\n","require('lib/view_helper');\n\n// Base class for all views.\nvar BaseView = Backbone.View.extend({\n  initialize: function () {\n    this.render = _.bind(this.render, this);\n  },\n\n  template: function () { return null; },\n  getRenderData: function () { return null; },\n\n  render: function () {\n    this.$el.html(this.template(this.getRenderData()));\n    this.afterRender();\n    return this;\n  },\n\n  afterRender: function () { return null; }\n});\n\nmodule.exports = BaseView;\n","\nvar BaseView = require('./base_view');\n\n/*\n   View that display a collection of subitems\n   used to DRY views\n   Usage : new ViewCollection(collection:collection)\n   Automatically populate itself by creating a itemView for each item\n   in its collection\n\n   can use a template that will be displayed alongside the itemViews\n\n   itemView       : the Backbone.View to be used for items\n   itemViewOptions : the options that will be passed to itemViews\n   collectionEl : the DOM element's selector where the itemViews will\n   be displayed. Automatically falls back to el if null\n   */\n\nvar ViewCollection = BaseView.extend({\n  itemView: null,\n  views: {},\n  collectionEl: null,\n\n  appendView: function (view) {\n    this.$collectionEl.append(view.el);\n  },\n\n  initialize: function () {\n    BaseView.prototype.initialize.call(this);\n    this.views = {};\n    this.listenTo(this.collection, 'reset', this.onReset);\n    this.listenTo(this.collection, 'add', this.addItem);\n    this.listenTo(this.collection, 'remove', this.removeItem);\n\n    if (this.collectionEl === null || this.collectionEl == undefined) {\n      this.collectionEl = this.el;\n    }\n  },\n\n  render: function () {\n    for (id in this.views) {\n      this.views[id].$el.detach();\n    }\n    BaseView.prototype.render.call(this);\n    return this;\n  },\n\n  afterRender: function () {\n    this.$collectionEl = $(this.collectionEl);\n    for (id in this.views) {\n      this.appendView(this.views[id]);\n    }\n    this.onReset(this.collection);\n  },\n\n  remove: function () {\n    this.onReset();\n    BaseView.prototype.remove.call(this);\n  },\n\n  onReset: function (newCollection) {\n    for (id in this.views) {\n      view.remove();\n    }\n\t\tvar self = this;\n\t\tnewCollection.forEach(function (elem) {\n\t\t\t\tself.addItem(elem, self);\n\t\t});\n  },\n\n  addItem: function (model, self) {\n    view = new this.itemView({model: model});\n    this.views[model.cid] = view.render();\n    this.appendView(view);\n  },\n\n\n  removeItem: function (model) {\n    this.views[model.cid].remove();\n    delete this.views[model.cid];\n  }\n})\n\nmodule.exports = ViewCollection;\n","// Put your handlebars.js helpers here.\n","\n\nvar Count = Backbone.Model.extend({\n\tname: null,\n\tdescription: null,\n});\n\nmodule.exports = Count;\n","\nvar HomeView = require('views/home/home_view');\nvar MenuView = require('views/menu/menu_view');\nvar CountEditorView = require('views/count-editor/count_editor_view');\n\n\nvar CountList = require('collections/count_list');\nvar Count = require('models/count');\n\nvar Router = Backbone.Router.extend({\n\n\tmainScreen: null,\n\tmainMenu: null,\n\n\tinitialize: function () {\n\t\tif (window.countCollection == null || window.countCollection == undefined) {\n\t\t\tthis.createCountCollection();\n\t\t}\n\n\t\tthis.mainMenu = new MenuView();\n\t\tthis.mainMenu.render();\n\n\t\tBackbone.Router.prototype.initialize.call(this);\n\t},\n\n\troutes: {\n\t\t''\t\t\t\t\t\t\t\t: 'mainBoard',\n\t\t'count/create'\t\t: 'countEditor',\n\t},\n\n\n\tmainBoard: function () {\n\t\tconsole.log('print mainBoard');\n\t\tview = new HomeView();\n\n\t\tthis.displayView(view);\n\t},\n\n\n\tcountEditor: function () {\n\t\tif (window.countCollection == null || window.countCollection == undefined) {\n\t\t\tthis.createCountCollection();\n\t\t}\n\t\tconsole.log('lauch count editor view');\n\t\tview = new CountEditorView();\n\n\t\tthis.displayView(view);\n\t},\n\n\n\tdisplayView: function (view) {\n\t\tif (this.mainView !== null && this.mainView !== undefined) {\n\t\t\tthis.mainView.remove();\n\t\t}\n\t\tthis.mainView = view;\n\t\t$('#content-screen').append(view.$el);\n\t\tview.render();\n\t},\n\n\n\tcreateCountCollection: function () {\n\t\twindow.countCollection = new CountList();\n\n\t\tif (window.listCount == null || window.listCount == undefined || window.listCount == \"\") {\n\t\t\tconsole.log('listCount empty');\n\t\t\treturn;\n\t\t}\n\n\t\tvar index = 0;\n\t\twhile (index < window.listCount.length) {\n\t\t\tvar newCount = new Count(window.listCount[index]);\n\t\t\twindow.countCollection.add(newCount);\n\t\t\tindex++;\n\t\t}\n\t},\n});\n\nmodule.exports = Router;\n","var BaseView = require('../../lib/base_view');\nvar template = require('./templates/count_editor');\nvar app = require('../../application');\n\n\nvar CountEditor = BaseView.extend({\n\tid: 'count-editor-screen',\n  template: template,\n\n\tevents: {\n\t\t'click #submit-create-count':\t'laucheCountCreation',\n\t},\n\n\n\tlaucheCountCreation: function () {\n\t\twindow.countCollection.create({\n\t\t\tname: this.$('#input-name').val(),\n\t\t\tdescription: this.$('#input-description').val(),\n\t\t});\n\t\tconsole.log('collection: ', window.countCollection);\n\t}\n\n\n});\n\nmodule.exports = CountEditor;\n","module.exports = function anonymous(locals, attrs, escape, rethrow, merge\n/**/) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<h1>New Count</h1><form><div class=\"form-group\"><label for=\"input-name\">Count Name</label><input id=\"input-name\" type=\"text\" placeholder=\"Name\" class=\"form-control\"/></div><div class=\"form-group\"><label for=\"input-description\">Count Description</label><input id=\"input-description\" type=\"text\" placeholder=\"Description\" class=\"form-control\"/></div><button id=\"submit-create-count\" class=\"btn btn-default\">Submit</button></form>');\n}\nreturn buf.join(\"\");\n};","\nvar ViewCollection = require('../../lib/view_collection');\nvar HomeCountRowView = require('./count_row_view');\n\nvar HomeCountListView = ViewCollection.extend({\n\tel: '#home-list-count',\n\n\titemView: HomeCountRowView,\n\n\tinitialize: function (collection) {\n\t\tthis.collection = collection;\n\t\tViewCollection.prototype.initialize.call(this);\n\t},\n});\n\nmodule.exports = HomeCountListView;\n","var BaseView = require('../../lib/base_view');\nvar template = require('./templates/count_row');\n\n\nvar HomeCountRowView = BaseView.extend({\n\ttemplate: template,\n\n\tgetRenderData: function () {\n\t\treturn ({model: this.model.toJSON()});\n\t},\n\n});\n\nmodule.exports = HomeCountRowView;\n","var BaseView = require('../../lib/base_view');\nvar CountListView = require('./count_list_view');\n\n\nvar template = require('./templates/home');\nvar app = require('../../application');\n\nvar HomeView = BaseView.extend({\n\tid: 'home-screen',\n  template: template,\n\n\tevents: {\n\t\t'click #create-new-count' : 'createNewCount'\n\t},\n\n\tafterRender: function () {\n\t\tthis.countCollectionView = new CountListView(window.countCollection);\n\t\tthis.countCollectionView.render();\n\t},\n\n\tcreateNewCount: function () {\n\t\tapp.router.navigate('count/create', {trigger: true});\n\t},\n\n});\n\nmodule.exports = HomeView;\n","module.exports = function anonymous(locals, attrs, escape, rethrow, merge\n/**/) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<div class=\"panel panel-default\"><div class=\"panel-heading\">' + escape((interp = model.name) == null ? '' : interp) + '</div><div class=\"panel-body\"><h4>Description</h4><p>' + escape((interp = model.description) == null ? '' : interp) + '</p></div></div>');\n}\nreturn buf.join(\"\");\n};","module.exports = function anonymous(locals, attrs, escape, rethrow, merge\n/**/) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<div id=\"list-all-count\"><label for=\"home-list\">All Count</label><ul id=\"home-list-count\" class=\"nav nav-sidebar\"></ul></div><button id=\"create-new-count\" class=\"btn btn-default\">Create New Count</button>');\n}\nreturn buf.join(\"\");\n};","\nvar ViewCollection = require('../../lib/view_collection');\nvar MenuCountRowView = require('./count_row_view');\n\nvar MenuCountListView = ViewCollection.extend({\n\tel: '#menu-list-count',\n\n\titemView: MenuCountRowView,\n\n\tinitialize: function (collection) {\n\t\tthis.collection = collection;\n\t\tViewCollection.prototype.initialize.call(this);\n\t},\n});\n\nmodule.exports = MenuCountListView;\n","var BaseView = require('../../lib/base_view');\nvar template = require('./templates/count_row');\n\n\nvar MenuCountRowView = BaseView.extend({\n\ttemplate: template,\n\n\tgetRenderData: function () {\n\t\treturn ({model: this.model.toJSON()});\n\t},\n\n});\n\nmodule.exports = MenuCountRowView;\n","var BaseView = require('../../lib/base_view');\nvar CountListView = require('./count_list_view');\nvar template = require('./templates/menu');\nvar app = require('../../application');\n\nvar MenuView = BaseView.extend({\n\tel: '#menu-screen',\n\tclassName: 'sidebar',\n\n\ttemplate: template,\n\n\tevents: {\n\t\t'click #menu-all-count'\t\t: 'goHomeView',\n\t\t'click #menu-add-count'\t\t: 'createNewCount',\n\t},\n\n\tafterRender: function () {\n\t\tthis.countCollectionView = new CountListView(window.countCollection);\n\t\tthis.countCollectionView.render();\n\t},\n\n\n\tgoHomeView: function () {\n\t\tapp.router.navigate('', {trigger: true});\n\t},\n\n\n\tcreateNewCount: function () {\n\t\tapp.router.navigate('count/create', {trigger: true});\n\t},\n});\n\nmodule.exports = MenuView;\n","module.exports = function anonymous(locals, attrs, escape, rethrow, merge\n/**/) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<li><a class=\"menu-count-row\">' + escape((interp = model.name) == null ? '' : interp) + '</a></li>');\n}\nreturn buf.join(\"\");\n};","module.exports = function anonymous(locals, attrs, escape, rethrow, merge\n/**/) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<label for=\"menu-section\">Count</label><ul id=\"menu-section\" class=\"nav nav-sidebar\"><li><a id=\"menu-all-count\">All Count</a></li></ul><ul id=\"menu-list-count\" class=\"nav nav-sidebar\"></ul><li><a id=\"menu-add-count\">Create a Count</a></li>');\n}\nreturn buf.join(\"\");\n};"]}