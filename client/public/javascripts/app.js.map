{"version":3,"sources":["app/private/application.js","app/private/collections/count_list.js","app/private/helper/color_set.js","app/private/initialize.js","app/private/lib/base_view.js","app/private/lib/socket.js","app/private/lib/view_collection.js","app/private/models/count.js","app/private/router.js","app/private/views/allArchives/all_archive_view.js","app/private/views/allArchives/archive_list_view.js","app/private/views/allArchives/archive_row_view.js","app/private/views/allArchives/templates/all_archive.jade","app/private/views/allArchives/templates/archive_row.jade","app/private/views/allCount/all_count_view.js","app/private/views/allCount/count_list_view.js","app/private/views/allCount/count_row_view.js","app/private/views/allCount/templates/all_count.jade","app/private/views/allCount/templates/count_row.jade","app/private/views/count/archive_view.js","app/private/views/count/count_base_view.js","app/private/views/count/count_view.js","app/private/views/count/square_view.js","app/private/views/count/stats_view.js","app/private/views/count/templates/count.jade","app/private/views/count/templates/square.jade","app/private/views/countEditor/count_creation_view.js","app/private/views/countEditor/count_edition_base.js","app/private/views/countEditor/count_update_view.js","app/private/views/countEditor/templates/count_creation.jade","app/private/views/countEditor/templates/count_update.jade","app/private/views/countEditor/templates/url.jade","app/private/views/menu/count_list_view.js","app/private/views/menu/count_row_view.js","app/private/views/menu/menu_view.js","app/private/views/menu/templates/count_row.jade","app/private/views/newEvent/expense/new_expense_view.js","app/private/views/newEvent/expense/templates/new_expense.jade"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAphfA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzljIA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvrHA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxpDA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAftfile":"public/javascripts/app.js","sourcesContent":["// Application bootstrapper.\nvar Application = {\n  initialize: function () {\n\n    var Router = require('./router');\n\n    // Router initialization\n    this.router = new Router();\n\n\n    if (typeof Object.freeze === 'function') {\n      Object.freeze(this);\n    }\n  }\n};\n\nmodule.exports = Application;\n","var Count = require('../models/count');\n\n/*\n * Manage a list of count like countCollection or archiveCollection.\n *\n */\nvar CountList = Backbone.Collection.extend({\n  model: Count,\n  url: 'count',\n});\n\nmodule.exports = CountList;\n","module.exports = [\n  '2979FF',\n  'B3C51D',\n  '00D5B8',\n  'FF5700',\n  'F819AA',\n  '7190AB',\n  '00B0FF',\n  'E70505',\n  'FF7900',\n  '51658D',\n  '304FFE',\n  '00DCE9',\n  'FF2828',\n  '6200EA',\n  '64DD17',\n  '00C853',\n  'FFA300',\n];\n","var application = require('./application');\n\n$(function () {\n  application.initialize();\n\n  Backbone.history.start();\n\n  // Launch listener for responsive menu\n  $('[data-toggle=offcanvas]').click(function () {\n    $('.row-offcanvas').toggleClass('active');\n  });\n});\n","\n// Base class for all views.\nvar BaseView = Backbone.View.extend({\n  initialize: function () {\n    this.render = _.bind(this.render, this);\n  },\n\n  template: function () { return null; },\n  getRenderData: function () { return null; },\n\n  render: function () {\n    this.$el.html(this.template(this.getRenderData()));\n    this.afterRender();\n    return this;\n  },\n\n  afterRender: function () { return null; }\n});\n\nmodule.exports = BaseView;\n","/*global\n CozySocketListener\n */\nvar Count = require('../models/count');\nvar CountView = require('../views/count/count_view');\nvar app = require('../application');\n\n/*\n * Manage the real-time\n */\nfunction SocketListener() {\n  // Parent constructor\n  CozySocketListener.call(this);\n}\n\nSocketListener.prototype = Object.create(CozySocketListener.prototype);\n\n/*\n * Listen the dataype \"shared-count\"\n */\nCozySocketListener.prototype.models = {\n  'shared-count': Count\n};\n\n/*\n * Listen the \"update\" action\n */\nCozySocketListener.prototype.events = [\n  'shared-count.update'\n];\n\n\n/*\n * Is trigger after update the model in collection. Create a complete\n * re-rendering\n * if the updated count is the one currently printed, in other case, do nothing.\n *\n * This is basic but without real-time any count modification lead to a page\n * rendering except the user-adding so currently there isn't methode to make\n * hot update\n */\nSocketListener.prototype.onRemoteUpdate = function (model, collection) {\n  var printModel = app.router.mainView.count,\n    view = null;\n\n  if (printModel.id === model.id) {\n    view = new CountView({countName: printModel.get('name')});\n    app.router.displayView(view);\n  }\n};\n\nmodule.exports = SocketListener;\n","/*jslint plusplus: true */\nvar BaseView = require('./base_view');\n\n/*\n   View that display a collection of subitems\n   used to DRY views\n   Usage : new ViewCollection(collection:collection)\n   Automatically populate itself by creating a itemView for each item\n   in its collection\n\n   can use a template that will be displayed alongside the itemViews\n\n   itemView       : the Backbone.View to be used for items\n   itemViewOptions : the options that will be passed to itemViews\n   collectionEl : the DOM element's selector where the itemViews will\n   be displayed. Automatically falls back to el if null\n   */\n\nvar ViewCollection = BaseView.extend({\n  itemView: null,\n  views: {},\n  collectionEl: null,\n\n  appendView: function (view) {\n    this.$collectionEl.append(view.el);\n  },\n\n  initialize: function () {\n    BaseView.prototype.initialize.call(this);\n    this.views = {};\n    this.listenTo(this.collection, 'reset', this.onReset);\n    this.listenTo(this.collection, 'add', this.addItem);\n    this.listenTo(this.collection, 'remove', this.removeItem);\n\n    if (this.collectionEl === null || this.collectionEl === undefined) {\n      this.collectionEl = this.el;\n    }\n  },\n\n  render: function () {\n    var id = null;\n\n    for (id = 0; id < this.views.length; id++) {\n      this.views[id].$el.detach();\n    }\n    BaseView.prototype.render.call(this);\n    return this;\n  },\n\n  afterRender: function () {\n    var id = null;\n\n    this.$collectionEl = $(this.collectionEl);\n    for (id = 0; id < this.views.length; id++) {\n      this.appendView(this.views[id]);\n    }\n    this.onReset(this.collection);\n  },\n\n  remove: function () {\n    this.onReset();\n    BaseView.prototype.remove.call(this);\n  },\n\n  onReset: function (newCollection) {\n    var id = null,\n      self = this;\n\n    for (id = 0; id < this.views.length; id++) {\n      this.views[id].remove();\n    }\n    newCollection.forEach(function (elem) {\n      self.addItem(elem);\n    });\n  },\n\n  addItem: function (model) {\n    var view = new this.itemView({model: model});\n    this.views[model.cid] = view.render();\n    this.appendView(view);\n  },\n\n\n  removeItem: function (model) {\n    this.views[model.cid].remove();\n    delete this.views[model.cid];\n  }\n});\n\nmodule.exports = ViewCollection;\n","\nvar app = require('../application');\n\n/*\n * Count object\n */\nvar Count = Backbone.Model.extend({\n\n  removeExpense: function (id) {\n    var newExpenses = this.get('expenses'),\n      currentExpenses = this.get('allExpenses'),\n      leecherList = null,\n      expenseRemove = null,\n      seederName = null,\n      newUsersList = null,\n      newAllExpenses = null,\n      index = null;\n\n    index = this.get('expenses').findIndex(function (elem) {\n      return elem.id === id;\n    });\n\n    expenseRemove = newExpenses.splice(index, 1)[0];\n    seederName = expenseRemove.seederName;\n    leecherList = expenseRemove.leecher;\n\n    newUsersList = this.get('users').map(function (user) {\n      leecherList.every(function (expenseUser) {\n        if (user.name === expenseUser.name) {\n          var leechPerUser = (Math.round(Number(expenseRemove.amount) /\n                Number(expenseRemove.leecher.length) * 100) / 100).toFixed(2);\n          user.leech = (Math.round((Number(user.leech) - leechPerUser) * 100)\n              / 100).toFixed(2);\n          return false;\n        }\n        return true;\n      });\n\n      if (user.name === seederName) {\n        user.seed = (Math.round((Number(user.seed) -\n                Number(expenseRemove.amount)) * 100) / 100).toFixed(2);\n      }\n      return user;\n    });\n\n    newAllExpenses = (Math.round((Number(currentExpenses) -\n            Number(expenseRemove.amount)) * 100) / 100).toFixed(2);\n\n    this.save({\n      expenses: newExpenses,\n      allExpenses: newAllExpenses,\n      users: newUsersList\n    }, {\n      wait: true,\n      error: function (xhr) {\n        console.error('Remove expense fail: ', xhr);\n      }\n    });\n  },\n\n\n  archive: function () {\n    var self = this;\n    this.save({\n      status: 'archive'\n    }, {\n      wait: true,\n      success: function () {\n        window.countCollection.remove(self);\n        window.archiveCollection.push(self);\n        app.router.navigate('', {trigger: true});\n      },\n      error: function (xhr) {\n        console.error(xhr);\n      }\n    });\n  },\n});\n\nmodule.exports = Count;\n","/*jslint plusplus: true*/\n\n// View list\nvar AllCountView = require('./views/allCount/all_count_view');\nvar AllArchiveView = require('./views/allArchives/all_archive_view');\n\n// View screen\nvar CountView = require('./views/count/count_view');\nvar MenuView = require('./views/menu/menu_view');\nvar CountUpdateView = require('./views/countEditor/count_update_view');\nvar CountCreationView = require('./views/countEditor/count_creation_view');\nvar ArchiveView = require('./views/count/archive_view');\nvar NewExpense = require('./views/newEvent/expense/new_expense_view');\nvar SocketListener = require('./lib/socket');\n\n// Models\nvar CountList = require('./collections/count_list');\nvar Count = require('./models/count');\n\nvar Router = Backbone.Router.extend({\n\n  mainMenu: null,\n  mainView: null,\n  currentButton: null,\n\n  /*\n   * Initialize the main collections and the real-time socket. The menu is the\n   * same in each view so it rendered here.\n   *\n   */\n  initialize: function () {\n    this.initializeCollections();\n\n\n    this.socket = new SocketListener();\n    this.socket.watch(window.countCollection);\n\n\n    this.mainMenu = new MenuView();\n    this.mainMenu.renderCounts();\n\n    Backbone.Router.prototype.initialize.call(this);\n  },\n\n\n  routes: {\n    ''                          : 'mainBoard',\n    'count/create'              : 'countCreation',\n    'count/update/:id'          : 'countUpdate',\n    'count/:id'                 : 'printCount',\n    'count/:name/new-expense'   : 'newExpense',\n    'count/:name/new-repayment' : 'newRepayment',\n    'archive'                   : 'printAllArchive',\n    'archive/:name'             : 'printArchive',\n  },\n\n\n  /*\n   * Print The main Board with the list of counts.\n   *\n   * If there is not count it redirect to the count creation\n   */\n  mainBoard: function () {\n    if (window.countCollection.length === 0) {\n      this.navigate('count/create', {trigger: true});\n    } else {\n      this.selectInMenu($('#menu-all-count').parent());\n      var view = new AllCountView();\n\n      this.displayView(view);\n    }\n  },\n\n\n  /*\n   * This view is used for count modification\n   */\n  countUpdate: function (countId) {\n    var count = window.countCollection.get(countId),\n      view = null;\n\n    this.selectInMenu($('#count-' + count.get('name')).parent());\n    view = new CountUpdateView({count: count});\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * This view is used for count creation\n   */\n  countCreation: function () {\n    this.selectInMenu($('#menu-add-count').parent());\n    var view = new CountCreationView();\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Screen for create a new expense\n   */\n  newExpense: function (countName) {\n    this.selectInMenu($('#count-' + countName).parent());\n\n    var view = new NewExpense({countName: countName, type: 'expense'});\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Screen for create a new expense\n   */\n  newRepayment: function (countName) {\n    this.selectInMenu($('#count-' + countName).parent());\n\n    var view = new NewExpense({countName: countName, type: 'payment'});\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Print specific count\n   */\n  printCount: function (countName) {\n    this.selectInMenu($('#count-' + countName).parent());\n\n    var view = new CountView({countName: countName});\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Print all archives\n   */\n  printAllArchive: function () {\n    this.selectInMenu($('#menu-archives').parent());\n    var view = new AllArchiveView();\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Print specifique archive\n   */\n  printArchive: function (archiveName) {\n    this.selectInMenu($('#menu-archives').parent());\n    var view = new ArchiveView({countName: archiveName});\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Manage menu overlight, must be call in all path\n   */\n  selectInMenu: function (button) {\n    if (this.currentButton !== null) {\n      this.currentButton.removeClass('active');\n    }\n    this.currentButton = button;\n    this.currentButton.addClass('active');\n  },\n\n\n  /*\n   * Generic function to manage view printing, must be call if you want print\n   * a screen\n   */\n  displayView: function (view) {\n    if (this.mainView !== null && this.mainView !== undefined) {\n      this.mainView.remove();\n    }\n    this.mainView = view;\n    $('#content-screen').append(view.$el);\n    view.render();\n  },\n\n\n  /*\n   * Set the fetched data from server in the two main collection:\n   *\n   * - countCollection\n   * - archiveCollection\n   *\n   * All data are send directly with the first page so we don't have to manage\n   * an \"in-time\" fetching. Currently there isn't a bunch of data so it is the\n   * simpliest way and it haven't consequences on rendering time\n   */\n  initializeCollections: function () {\n    var index = null,\n      count = null,\n      newCount = null;\n\n    window.countCollection = new CountList();\n    window.archiveCollection = new CountList();\n\n    if (window.listCount === null) {\n      console.log('listCount empty');\n      return;\n    }\n\n    for (index = 0; index < window.listCount.length; index++) {\n      count = window.listCount[index];\n      if (count.status === 'active') {\n        newCount = new Count(count);\n        window.countCollection.add(newCount);\n      } else if (count.status === 'archive') {\n        newCount = new Count(count);\n        window.archiveCollection.add(newCount);\n      }\n    }\n  },\n});\n\nmodule.exports = Router;\n","var BaseView = require('../../lib/base_view');\nvar ArchiveListView = require('./archive_list_view');\n\nvar AllArchiveView = BaseView.extend({\n  id: 'all-archive-screen',\n  template: require('./templates/all_archive'),\n\n\n  initialize: function () {\n    this.collection = window.archiveCollection;\n    BaseView.prototype.initialize.call(this);\n  },\n\n  getRenderData: function () {\n    return {numberArchives: this.collection.length};\n  },\n\n  afterRender: function () {\n    this.collectionView = new ArchiveListView({\n      collection: this.collection,\n    });\n    this.collectionView.render();\n  },\n});\n\nmodule.exports = AllArchiveView;\n","var ViewCollection = require('../../lib/view_collection');\nvar ArchiveRowView = require('./archive_row_view');\n\nvar ArchiveListView = ViewCollection.extend({\n  el: '#list-view',\n\n  itemView: ArchiveRowView,\n\n  initialize: function () {\n    this.collection = window.archiveCollection;\n    ViewCollection.prototype.initialize.call(this);\n  }\n});\n\nmodule.exports = ArchiveListView;\n","var BaseView = require('../../lib/base_view');\n\nvar app = require('../../application');\n\nvar ArchiveRowView = BaseView.extend({\n  template: require('./templates/archive_row'),\n\n  events: {\n    'click .archive-see-count': 'seeArchive',\n  },\n\n  getRenderData: function () {\n    return ({model: this.model.toJSON()});\n  },\n\n\n  seeArchive: function () {\n    app.router.navigate('archive/' + this.model.get('name'), {trigger: true});\n  },\n});\n\nmodule.exports = ArchiveRowView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (numberArchives) {\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-body\\\">\");\nif ( numberArchives > 0)\n{\nbuf.push(\"<ul id=\\\"list-view\\\" class=\\\"nav nav-sidebar\\\"></ul>\");\n}\nelse\n{\nbuf.push(\"<div class=\\\"page-header\\\"><h1>No archive yet</h1><p>When you archieve some account you can find it here :)</p></div>\");\n}\nbuf.push(\"</div></div>\");}.call(this,\"numberArchives\" in locals_for_with?locals_for_with.numberArchives:typeof numberArchives!==\"undefined\"?numberArchives:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (model, undefined) {\nbuf.push(\"<div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\">\" + (jade.escape((jade_interp = model.name) == null ? '' : jade_interp)) + \"</div><div class=\\\"panel-body\\\"><label for=\\\"description\\\">Description</label><div id=\\\"description\\\" class=\\\"form-group\\\"><p>\" + (jade.escape((jade_interp = model.description) == null ? '' : jade_interp)) + \"</p></div><label for=\\\"user-list\\\">Users</label><div id=\\\"user-list\\\" class=\\\"form-group\\\">\");\n// iterate model.users\n;(function(){\n  var $$obj = model.users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div><div class=\\\"form-group\\\"><button class=\\\"archive-see-count btn btn-primary btn-block\\\">See</button></div></div></div>\");}.call(this,\"model\" in locals_for_with?locals_for_with.model:typeof model!==\"undefined\"?model:undefined,\"undefined\" in locals_for_with?locals_for_with.undefined:typeof undefined!==\"undefined\"?undefined:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var BaseView = require('../../lib/base_view');\nvar CountListView = require('./count_list_view');\nvar app = require('../../application');\n\nvar AllCountView = BaseView.extend({\n  id: 'all-count-screen',\n  template: require('./templates/all_count'),\n\n  events: {\n    'click #create-new-count' : 'createNewCount',\n  },\n\n\n  initialize: function (attributes) {\n    this.collection = window.countCollection;\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  afterRender: function () {\n    this.collectionView = new CountListView({\n      collection: this.collection,\n    });\n    this.collectionView.render();\n  },\n\n\n  createNewCount: function () {\n    app.router.navigate('count/create', {trigger: true});\n  },\n\n});\n\nmodule.exports = AllCountView;\n","\nvar ViewCollection = require('../../lib/view_collection');\nvar CountRowView = require('./count_row_view');\n\nvar CountListView = ViewCollection.extend({\n  el: '#list-view',\n\n  itemView: CountRowView,\n\n  initialize: function () {\n    this.collection = window.countCollection;\n    ViewCollection.prototype.initialize.call(this);\n  }\n});\n\nmodule.exports = CountListView;\n","var BaseView = require('../../lib/base_view');\n\nvar app = require('../../application');\n\nvar CountRowView = BaseView.extend({\n  template: require('./templates/count_row'),\n\n  events: {\n    'click .count-delete' : 'deleteCount',\n    'click .count-modify' : 'modifyCount',\n    'click .count-see'    : 'seeCount',\n  },\n\n  getRenderData: function () {\n    return ({model: this.model.toJSON()});\n  },\n\n  deleteCount: function () {\n    window.countCollection.remove(this);\n    this.model.destroy();\n    if (window.countCollection.length === 0) {\n      app.router.navigate('count/create', {trigger: true});\n    }\n  },\n\n\n  modifyCount: function () {\n    app.router.navigate('count/update/' + this.model.id, {trigger: true});\n  },\n\n\n  seeCount: function () {\n    app.router.navigate('count/' + this.model.get('name'), {trigger: true});\n  }\n\n});\n\nmodule.exports = CountRowView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-body\\\"><ul id=\\\"list-view\\\" class=\\\"nav nav-sidebar\\\"><button id=\\\"create-new-count\\\" class=\\\"btn btn-default\\\">Create New Count</button></ul></div></div>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (model, undefined) {\nbuf.push(\"<div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\">\" + (jade.escape((jade_interp = model.name) == null ? '' : jade_interp)) + \"</div><div class=\\\"panel-body\\\">\");\nif ( model.description)\n{\nbuf.push(\"<label for=\\\"description\\\">Description</label><div id=\\\"description\\\" class=\\\"form-group\\\"><p>\" + (jade.escape((jade_interp = model.description) == null ? '' : jade_interp)) + \"</p></div>\");\n}\nbuf.push(\"<label for=\\\"user-list\\\">Users</label><div id=\\\"user-list\\\" class=\\\"form-group\\\">\");\n// iterate model.users\n;(function(){\n  var $$obj = model.users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div><div class=\\\"form-group\\\"><button class=\\\"count-see btn btn-default btn-block\\\">See</button><button class=\\\"count-modify btn btn-default btn-block\\\">Modify</button><button class=\\\"count-delete btn btn-default btn-block\\\">Delete</button></div></div></div>\");}.call(this,\"model\" in locals_for_with?locals_for_with.model:typeof model!==\"undefined\"?model:undefined,\"undefined\" in locals_for_with?locals_for_with.undefined:typeof undefined!==\"undefined\"?undefined:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var CountBaseView = require('./count_base_view');\nvar app = require('../../application');\n\n/*\n * View for all the archived count, based on the countBaseView (as count).\n */\nvar ArchiveView = CountBaseView.extend({\n  id: 'archive-screen',\n\n  count: null,\n  dataResume: {\n    allExpense: 0,\n  },\n\n  newExpense: null,\n  balancing: null,\n\n  events: {\n    'click #header-balancing':  'printBalancing',\n  },\n\n  initialize: function (attributes) {\n    this.count = window.archiveCollection.models.find(function (count) {\n      return count.get('name') === attributes.countName;\n    });\n\n    CountBaseView.prototype.initialize.call(this);\n  },\n\n\n});\n\nmodule.exports = ArchiveView;\n","// Requirements\nvar BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\n// Modules\nvar StatsView = require('./stats_view');\nvar SquareView = require('./square_view');\n\n\n/*\n * CountBaseView is a generique class for count and archive. Both\n * are both exactly the same stuctur (as count) but have differents actions in\n * fonction of their permissions\n */\nvar CountBaseView = BaseView.extend({\n  template: require('./templates/count'),\n\n\n  /*\n   * If count is undefined that mean I haven't find it in the collection so it's\n   * a bad url. That redirect to the mainBoard\n   */\n  initialize: function () {\n    if (this.count === undefined || this.count === null) {\n      console.error('invalide route');\n      app.router.navigate('', {trigger: true});\n    }\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  /*\n   * Call in render in BaseView class. Render the data to the template\n   */\n  getRenderData: function () {\n    if (this.count !== null && this.count !== undefined) {\n      var expensePerUser = +(Math.round(this.count.get('allExpenses') /\n            this.count.get('users').length * 100) / 100).toFixed(2);\n\n      return ({\n        count: this.count.toJSON(),\n        expensePerUser: expensePerUser\n      });\n    }\n  },\n\n\n  /*\n   * Render stats module\n   */\n  afterRender: function () {\n    if (this.count.get('expenses').length > 0) {\n      this.stats = new StatsView({count: this.count});\n      this.stats.render();\n    }\n  },\n\n\n  /*\n   * The balancing is by default not printed so that don't create it unless it's\n   * required.\n   */\n  printBalancing: function () {\n    if (this.balancing === null || this.balancing === undefined) {\n      this.balancing = new SquareView({count: this.count});\n      this.balancing.render();\n    }\n    this.balancing.clickDisplayer();\n  },\n});\n\nmodule.exports = CountBaseView;\n","var CountBaseView = require('./count_base_view');\nvar app = require('../../application');\n\nvar colorSet = require('../../helper/color_set');\n\n\n\n/*\n * The base view for the ACTIVE count, based on the countBaseView class\n */\nvar CountView = CountBaseView.extend({\n  id: 'count-screen',\n\n  count: null,\n  dataResume: {\n    allExpense: 0,\n  },\n\n  newExpense: null,\n  balancing: null,\n\n  events: {\n    'click #count-lauch-add-user' : 'addUser',\n    'click #add-new-expense'      : 'lauchNewExpense',\n    'click #add-new-repayment'    : 'lauchNewRepayment',\n    'click .header-expense-elem'  : 'printTransferBody',\n    'click .delete-expense-elem'  : 'deleteExpense',\n    'click #header-balancing'     : 'printBalancing',\n  },\n\n\n  /*\n   * Find the count model from his name\n   */\n  initialize: function (attributes) {\n    this.count = window.countCollection.models.find(function (count) {\n      return count.get('name') === attributes.countName;\n    });\n\n    CountBaseView.prototype.initialize.call(this);\n  },\n\n\n  /*\n   * All the process to add an user in the count\n   */\n  addUser: function () {\n    var userList = this.count.get('users'),\n      newUser = this.$('#count-input-add-user').val(),\n      color = colorSet[userList.length % colorSet.length],\n      nameIsTaken = null;\n\n    if (newUser.length === 0) {\n      return;\n    }\n    // Remove precedent alert\n    this.$('#alert-name').remove();\n    // Check if the name is taker\n    nameIsTaken = userList.find(function (elem) {\n      return elem.name === newUser;\n    });\n\n    // Print an alert and quit if the name is taken\n    if (nameIsTaken !== undefined) {\n      this.$('#name-alert').append(\"<div id='alert-name' class='alert\" +\n          \"alert-danger' role='alert'><a href='#' class='close'\" +\n          \" data-dismiss='alert'>&times;</a>Name already taken</div>\");\n      return;\n    }\n\n    // Add the name to the userlist if not taken\n    userList.push({name: newUser, seed: 0, leech: 0, color: color});\n\n    // Add the user button to  userlist\n    this.$('#user-list').append('<div class=\"row\"><button class=\"btn\"' +\n        'style=\"background-color: #' + color + '\">' + newUser +\n        '</button></div>');\n\n    // Save the new list of user\n    this.count.save({users: userList});\n\n    // Empty the user input\n    this.$('#count-input-add-user').val('');\n\n    // Update the stats\n    if (this.balancing !== null && this.balancing !== undefined) {\n      this.balancing.update();\n    }\n  },\n\n\n  /*\n   * The new expense editor is managed in a new page in order to make this page\n   * lighter in code and informations. It's also easier because we re-render\n   * the count with the new data so we haven't to handle hot change\n   */\n  lauchNewExpense: function (event) {\n    app.router.navigate('count/' + this.count.get('name') + '/new-expense',\n        {trigger: true});\n  },\n\n\n  lauchNewRepayment: function (event) {\n    app.router.navigate('count/' + this.count.get('name') + '/new-repayment',\n        {trigger: true});\n  },\n\n\n  /*\n   * Remove an expense\n   */\n  removeNewExpense: function () {\n    this.newExpense.remove();\n    delete this.newExpense;\n    this.newExpense = null;\n\n    // Remove the div\n    this.$('#module').prepend('<button id=\"add-new-expense\" class=\"btn' +\n        'btn-default btn-block\"> Add a new expense</button>');\n  },\n\n\n  /*\n   * Expand or remove the body of an element of the history\n   */\n  printTransferBody: function (event) {\n    var elem =  $(event.target),\n      expenseBody = null;\n    if (elem.is('span')) {\n      expenseBody =  $(event.target).parent().next('div');\n    } else {\n      expenseBody =  $(event.target).next('div');\n    }\n\n    if (expenseBody.is('.printed')) {\n      expenseBody.slideUp('slow');\n      expenseBody.removeClass('printed');\n    } else {\n      expenseBody.slideDown('slow');\n      expenseBody.addClass('printed');\n    }\n  },\n\n\n  /*\n   * Remove an history element and update the stats\n   */\n  deleteExpense: function (event) {\n    var id = Number(this.$(event.target).parent().attr('id'));\n\n    this.count.removeExpense(id);\n  },\n\n});\n\nmodule.exports = CountView;\n","/*jslint plusplus: true*/\nvar BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\n/*\n * Manage the balancing module.\n */\nvar SquareView = BaseView.extend({\n  id: 'square-view',\n  template: require('./templates/square'),\n\n\n  events: {\n    'click #archive-count': 'archive',\n  },\n\n\n  initialize: function (attributes) {\n    this.count = attributes.count;\n\n    this.setUsersBalance();\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  render: function () {\n    $('#module-balancing').prepend(this.$el);\n    this.$el.html(this.template({users: this.usersBalance,\n      squareMoves: this.squareMoves}));\n    this.$('#square-displayer').slideDown('slow');\n\n  },\n\n\n  /*\n   * Print or remove the body of the balancing module\n   */\n  clickDisplayer: function () {\n    var displayer = this.$('#square-displayer');\n\n    if (displayer.is('.printed')) {\n      displayer.slideUp('slow');\n      displayer.removeClass('printed');\n    } else {\n      displayer.slideDown('slow');\n      displayer.addClass('printed');\n    }\n  },\n\n\n  /*\n   * Update and rerender the balance\n   */\n  update: function () {\n    this.setUsersBalance();\n    this.setSquareMoves();\n    this.remove();\n    this.render();\n  },\n\n\n  /*\n   * Create an array with the name, color and balance of each user\n   */\n  setUsersBalance: function () {\n    this.usersBalance = this.count.get('users').map(function (user) {\n      return {\n        name: user.name,\n        color: user.color,\n        balance: (Math.round((user.seed - user.leech) * 100) / 100)\n      };\n    });\n\n    this.setSquareMoves();\n  },\n\n\n  /*\n   * Compute each moves to balance the count\n   */\n  setSquareMoves: function () {\n    this.squareMoves = [];\n\n    // copy the userBalance array\n    var tmpUsers = [].concat(this.usersBalance),\n      i = 0,\n      leecher = null,\n      indexLeecher = 0,\n      index = 0,\n      seeder = null,\n      indexSeeder = 0,\n      roundNumber = null,\n      exchange = null;\n\n    roundNumber = function (input) {\n      var number = null;\n\n      if (input instanceof Number) {\n        number = input;\n      } else {\n        number = Number(input);\n      }\n      return (Math.round(number * 100) / 100);\n    };\n\n    /*\n     * The main loop: in each loop it find the biggest leecher and the biggest\n     * seeder and we equalize between them. If one of them is balanced, that\n     * remove it.\n     *\n     * Repeat the loop while it stays 1 or less user. If one user stay it's\n     * a \"lost\" and we can't redistribute to any user. The goal it's to make\n     * this lost as small as possible. For now it's max \"0.01 * (nb or user -1)\"\n     */\n\n    while (tmpUsers.length > 1 && i++ < 50) {\n      leecher = null;\n      indexLeecher = 0;\n\n      // Find the biggest leecher\n      for (index = 0; index < tmpUsers.length; index++) {\n        if (leecher === null || (leecher.balance > tmpUsers[index].balance &&\n              leecher !== tmpUsers[index])) {\n          leecher = {\n            name: tmpUsers[index].name,\n            balance: Number(tmpUsers[index].balance)\n          };\n          indexLeecher = index;\n        }\n      }\n\n\n      // Find the biggest seeder\n      for (index = 0; index < tmpUsers.length; index++) {\n        if (seeder === null || (seeder.balance < tmpUsers[index].balance &&\n              seeder !== tmpUsers[index])) {\n          seeder = {\n            name: tmpUsers[index].name,\n            balance: Number(tmpUsers[index].balance)\n          };\n          indexSeeder = index;\n        }\n      }\n\n      // Compute the max amount available in the leecher and seeder.\n      if (leecher.balance * -1 > seeder.balance) {\n        exchange = seeder.balance;\n      } else {\n        exchange = -leecher.balance;\n      }\n\n\n      // Set the new balance\n      seeder.balance = roundNumber(seeder.balance - exchange);\n      leecher.balance = roundNumber(leecher.balance + exchange);\n\n      // Add the exchange to the list of exchanges\n      if (exchange !== 0 && exchange !== 'NaN') {\n        this.squareMoves.push({\n          from: leecher.name,\n          to: seeder.name,\n          exchange: exchange\n        });\n      }\n\n      // Remove the leecher of the seeder if their balance is equal to 0\n      if (leecher.balance === 0) {\n        tmpUsers.splice(indexLeecher, 1);\n      }\n      if (seeder.balance === 0) {\n        tmpUsers.splice(indexSeeder, 1);\n      }\n    }\n  },\n\n\n  /*\n   * Archive a count\n   */\n  archive: function (event) {\n    this.count.archive();\n  },\n\n\n  resetSquare: function () {\n    this.trigger('remove-module');\n  },\n});\n\nmodule.exports = SquareView;\n","/*global\n Chart\n */\nvar BaseView = require('../../lib/base_view');\n\n\n/*\n * Manage all stats in stats module\n */\nvar StatsView = BaseView.extend({\n  el: '#stats-module',\n\n\n  initialize: function (attributes) {\n    this.count = attributes.count;\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n\n  /*\n   * Create the pie chart and render it\n   */\n  render: function () {\n    var chartCtx = this.$('#chart-users').get(0).getContext(\"2d\"),\n      data = this.computeDataCount();\n    this.pieChart = new Chart(chartCtx).Pie(data);\n  },\n\n\n  /*\n   * Compute data needed in the pie chart. We don't add the user with 0 seed\n   * because the update don't work from 0 to X value.\n   */\n  computeDataCount: function () {\n    var data = [];\n    this.count.get('users').forEach(function (elem) {\n      if (Number(elem.seed) !== 0) {\n        data.push({value: elem.seed, color: '#' + elem.color,\n          label: elem.name});\n      }\n    });\n    return data;\n  },\n\n\n  /*\n   * Update the value of the pie chart\n   */\n  update: function () {\n    var allExpenses = Number(this.count.get('allExpenses')),\n      nbUsers = Number(this.count.get('users').length),\n      perUserExpenses = +(Math.round(allExpenses / nbUsers * 100) /\n          100).toFixed(2),\n      self = this;\n\n    // Update the numbers of the general state (to the right of the pie chart)\n    $('#nb-expenses').text(this.count.get('expenses').length);\n    $('#all-expenses').text(allExpenses);\n    $('#perUser-expenses').text(perUserExpenses);\n\n\n    /*\n     * Main loop where data for the pie chart is updated/created\n     */\n    this.count.get('users').forEach(function (user, indexUser) {\n      var indexPie = null;\n      // For each user is looked up in the pie chart's data\n      self.pieChart.segments.find(function (pieSegment, index) {\n        if (pieSegment.label === user.name) {\n          indexPie = index;\n          return true;\n        }\n        return false;\n      });\n      // If we find it we update the chart with the new data in the segment\n      if (indexPie !== undefined && indexPie !== null) {\n        if (user.seed === 0) {\n          self.pieChart.removeData(indexPie);\n        } else {\n          self.pieChart.segments[indexPie].value = user.seed;\n          self.pieChart.update();\n        }\n        // If not we create a new segment\n      } else {\n        self.pieChart.addData({\n          value: user.seed,\n          color: '#' + user.color,\n          label: user.name\n        });\n      }\n    });\n  },\n\n});\n\nmodule.exports = StatsView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (count, expensePerUser, undefined) {\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-body\\\"><div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\">Users</div><div class=\\\"panel-body\\\"><div id=\\\"stats-module\\\"><div class=\\\"col-md-4\\\"><div id=\\\"user-list\\\" class=\\\"col-md-12\\\">\");\n// iterate count.users\n;(function(){\n  var $$obj = count.users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<div class=\\\"row\\\"><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button></div>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<div class=\\\"row\\\"><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button></div>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div>\");\nif ( count.status == 'active')\n{\nbuf.push(\"<div id=\\\"name-alert\\\" class=\\\"row col-md-8\\\"><div class=\\\"input-group\\\"><form><input id=\\\"count-input-add-user\\\" type=\\\"text\\\" placeholder=\\\"My name\\\" class=\\\"form-control\\\"/><span class=\\\"input-group-btn\\\"><input id=\\\"count-lauch-add-user\\\" type=\\\"submit\\\" value=\\\"Add user\\\" class=\\\"btn btn-default\\\"/></span></form></div></div>\");\n}\nbuf.push(\"</div>\");\nif ( count.expenses.length > 0)\n{\nbuf.push(\"<div id=\\\"canvas-block\\\" class=\\\"col-md-4 col-xs-6\\\"><h4>Expenses per users</h4><canvas id=\\\"chart-users\\\" width=\\\"150\\\" height=\\\"150\\\"></canvas></div>\");\n}\nbuf.push(\"</div><div class=\\\"col-md-4 col-xs-6\\\"><label for=\\\"all-expenses\\\">All Expenses:</label><p id=\\\"all-expenses\\\">\" + (jade.escape((jade_interp = count.allExpenses) == null ? '' : jade_interp)) + \"</p><label for=\\\"nb-expenses\\\">Number Expenses:</label><p id=\\\"nb-expenses\\\">\" + (jade.escape((jade_interp = count.expenses.length) == null ? '' : jade_interp)) + \"</p><label for=\\\"nb-expenses\\\">Expenses per user:</label><p id=\\\"perUser-expenses\\\">\" + (jade.escape((jade_interp = expensePerUser) == null ? '' : jade_interp)) + \"</p></div></div>\");\nif ( (count.status == 'active'))\n{\nbuf.push(\"<div class=\\\"btn-group btn-block\\\"><button id=\\\"add-new-expense\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" class=\\\"btn btn-lg btn-success btn-block\\\"><span>&nbsp;Add an expense&nbsp;</span></button><button id=\\\"add-new-repayment\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" class=\\\"btn btn-lg btn-success btn-block\\\"><span>&nbsp;Add a repayment&nbsp;</span></button></div>\");\n}\nbuf.push(\"</div><div class=\\\"panel panel-primary\\\"><div id=\\\"header-balancing\\\" class=\\\"panel-heading\\\"><span class=\\\"caret\\\"></span><span>&nbsp;Balancing</span></div><div id=\\\"module-balancing\\\"></div></div><div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\">History</div><div class=\\\"panel-body\\\"><div id=\\\"expense-list-view\\\">\");\nif ( count.expenses.length == 0)\n{\nbuf.push(\"<span id=\\\"empty-history\\\">Your history is empty</span>\");\n}\nelse\n{\n// iterate count.expenses\n;(function(){\n  var $$obj = count.expenses;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var expense = $$obj[$index];\n\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-heading header-expense-elem\\\"><span class=\\\"caret\\\"></span><span> \" + (jade.escape((jade_interp = expense.name) == null ? '' : jade_interp)) + \"</span><span style=\\\"float: right\\\">\" + (jade.escape((jade_interp = expense.amount) == null ? '' : jade_interp)) + \" \" + (jade.escape((jade_interp = expense.currency.name) == null ? '' : jade_interp)) + \"</span></div><div style=\\\"display: none\\\"\" + (jade.attr(\"id\", \"\" + (expense.id) + \"\", true, false)) + \" class=\\\"panel-body\\\"><label for=\\\"seeder\\\">Who have paid ?</label><div id=\\\"seeder\\\"></div><button class=\\\"btn\\\">\" + (jade.escape((jade_interp = expense.seeder) == null ? '' : jade_interp)) + \"</button><div class=\\\"form-group\\\"><label for=\\\"leecher-list\\\">Who contribute ?</label><div id=\\\"leecher-list\\\" class=\\\"form-group\\\">\");\n// iterate expense.leecher\n;(function(){\n  var $$obj = expense.leecher;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div><button class=\\\"btn btn-default btn-block delete-expense-elem\\\">Delete</button></div></div>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var expense = $$obj[$index];\n\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-heading header-expense-elem\\\"><span class=\\\"caret\\\"></span><span> \" + (jade.escape((jade_interp = expense.name) == null ? '' : jade_interp)) + \"</span><span style=\\\"float: right\\\">\" + (jade.escape((jade_interp = expense.amount) == null ? '' : jade_interp)) + \" \" + (jade.escape((jade_interp = expense.currency.name) == null ? '' : jade_interp)) + \"</span></div><div style=\\\"display: none\\\"\" + (jade.attr(\"id\", \"\" + (expense.id) + \"\", true, false)) + \" class=\\\"panel-body\\\"><label for=\\\"seeder\\\">Who have paid ?</label><div id=\\\"seeder\\\"></div><button class=\\\"btn\\\">\" + (jade.escape((jade_interp = expense.seeder) == null ? '' : jade_interp)) + \"</button><div class=\\\"form-group\\\"><label for=\\\"leecher-list\\\">Who contribute ?</label><div id=\\\"leecher-list\\\" class=\\\"form-group\\\">\");\n// iterate expense.leecher\n;(function(){\n  var $$obj = expense.leecher;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div><button class=\\\"btn btn-default btn-block delete-expense-elem\\\">Delete</button></div></div>\");\n    }\n\n  }\n}).call(this);\n\n}\nbuf.push(\"</div></div></div></div></div>\");}.call(this,\"count\" in locals_for_with?locals_for_with.count:typeof count!==\"undefined\"?count:undefined,\"expensePerUser\" in locals_for_with?locals_for_with.expensePerUser:typeof expensePerUser!==\"undefined\"?expensePerUser:undefined,\"undefined\" in locals_for_with?locals_for_with.undefined:typeof undefined!==\"undefined\"?undefined:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (squareMoves, undefined, users) {\nbuf.push(\"<div id=\\\"square-displayer\\\" style=\\\"display: none\\\" class=\\\"panel-body\\\"><label for=\\\"balancing\\\">Balancing:</label><ul id=\\\"balancing\\\">\");\n// iterate users\n;(function(){\n  var $$obj = users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<li><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \":</button>\");\nif ( user.balance == 0)\n{\nbuf.push(\"<span style=\\\"color: blue\\\">&nbsp;ok</span>\");\n}\nif ( user.balance > 0)\n{\nbuf.push(\"<span style=\\\"color: green\\\">&nbsp;+\" + (jade.escape((jade_interp = user.balance) == null ? '' : jade_interp)) + \"</span>\");\n}\nif ( user.balance < 0)\n{\nbuf.push(\"<span style=\\\"color: red\\\">&nbsp;\" + (jade.escape((jade_interp = user.balance) == null ? '' : jade_interp)) + \"</span>\");\n}\nbuf.push(\"</li>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<li><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \":</button>\");\nif ( user.balance == 0)\n{\nbuf.push(\"<span style=\\\"color: blue\\\">&nbsp;ok</span>\");\n}\nif ( user.balance > 0)\n{\nbuf.push(\"<span style=\\\"color: green\\\">&nbsp;+\" + (jade.escape((jade_interp = user.balance) == null ? '' : jade_interp)) + \"</span>\");\n}\nif ( user.balance < 0)\n{\nbuf.push(\"<span style=\\\"color: red\\\">&nbsp;\" + (jade.escape((jade_interp = user.balance) == null ? '' : jade_interp)) + \"</span>\");\n}\nbuf.push(\"</li>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</ul><label for=\\\"balancing\\\">How to be square:</label><ul id=\\\"square\\\">\");\n// iterate squareMoves\n;(function(){\n  var $$obj = squareMoves;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var move = $$obj[$index];\n\nbuf.push(\"<li>[\" + (jade.escape((jade_interp = move.from) == null ? '' : jade_interp)) + \"] gave [\" + (jade.escape((jade_interp = move.exchange) == null ? '' : jade_interp)) + \"] to [\" + (jade.escape((jade_interp = move.to) == null ? '' : jade_interp)) + \"]</li>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var move = $$obj[$index];\n\nbuf.push(\"<li>[\" + (jade.escape((jade_interp = move.from) == null ? '' : jade_interp)) + \"] gave [\" + (jade.escape((jade_interp = move.exchange) == null ? '' : jade_interp)) + \"] to [\" + (jade.escape((jade_interp = move.to) == null ? '' : jade_interp)) + \"]</li>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</ul><button id=\\\"archive-count\\\" class=\\\"btn btn-primary btn-block\\\">Close and archive</button></div>\");}.call(this,\"squareMoves\" in locals_for_with?locals_for_with.squareMoves:typeof squareMoves!==\"undefined\"?squareMoves:undefined,\"undefined\" in locals_for_with?locals_for_with.undefined:typeof undefined!==\"undefined\"?undefined:undefined,\"users\" in locals_for_with?locals_for_with.users:typeof users!==\"undefined\"?users:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var CountEditionBase = require('./count_edition_base');\nvar BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\nvar colorSet = require('../../helper/color_set');\n\n/*\n * Manage the count creation form\n */\nvar CountCreationView = CountEditionBase.extend({\n  template: require('./templates/count_creation'),\n  templateUrl: require('./templates/url'),\n\n  events: {\n    'click #submit-editor'  : 'lauchCountCreation',\n    'click #add-user'       : 'addUser',\n    'click .currency'       : 'setCurrency',\n    'click #input-public'   : 'setPublic'\n  },\n\n\n  initialize: function (params) {\n\n    this.userList = [];\n    this.currencies = [];\n    this.countName = '';\n    this.nameIsUsed = false;\n    this.isPublic = false;\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  /*\n   * Add a listener in the changes of the input of name\n   */\n  afterRender: function () {\n    this.$('#input-name')[0].addEventListener('change', (function (_this) {\n      return function (event) {\n        _this.countName = _this.checkCountName(event);\n      };\n    }(this)));\n  },\n\n\n  /*\n   * Check if the name is already taken is the count. If it taken it put an\n   * alert else he add a button with the name.\n   */\n  addUser: function (event) {\n    var color = colorSet[this.userList.length % colorSet.length],\n      newUser = this.$('#input-users').val(),\n      nameIsTaken = null;\n\n    this.$('#alert-name').remove();\n\n    // Check if the name is already in the userList\n    nameIsTaken = this.userList.find(function (user) {\n      if (user.name === newUser) {\n        return true;\n      }\n      return false;\n    });\n\n    // If there is a name we put the alert\n    if (nameIsTaken !== undefined) {\n      this.$('#input-user-grp').append('<div id=\"alert-name\" class=\"alert' +\n          'alert-danger\" role=\"alert\"><a href=\"#\" class=\"close\"' +\n          'data-dismiss=\"alert\">&times;</a>Name already taken</div>');\n      return;\n    }\n\n    // Else we create a user\n    if (newUser.length > 0) {\n      this.userList.push({\n        name: newUser,\n        seed: 0,\n        leech: 0,\n        color: color\n      });\n\n      // Add the button\n      this.$('#list-users').append('<button class=\"btn\"' +\n        ' style=\"background-color: #' + color +\n        '\">' + newUser + '</button>');\n      // Add empty the input\n      this.$('#input-users').val('');\n    }\n  },\n\n\n  /*\n   * Set the currencies available on the count\n   */\n  setCurrency: function (event) {\n    var selectedCurrency = this.$(event.target).children().get(0).value,\n      currencyIndex = null;\n\n    this.currencies.find(function (elem, index) {\n      if (elem.name === selectedCurrency) {\n        currencyIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (currencyIndex === null) {\n      this.currencies.push({\n        name: selectedCurrency,\n        taux: 1,\n      });\n    } else {\n      this.currencies.splice(currencyIndex, 1);\n    }\n  },\n\n\n  /*\n   * Check all inputs to verifies if they are correct. If they are wrong an\n   * alert div is trigger. If all inputs are good it save the new count in the\n   * collection server side\n   */\n  lauchCountCreation: function () {\n    var countDescription = this.$('#input-description').val(),\n      countName = this.countName,\n      error = false;\n\n    this.$('#alert-zone').remove();\n    this.$('#formular').prepend('<div id=\"alert-zone\"></div>');\n\n    if (this.nameIsUsed === true) {\n      this.errorMessage('Your namee is already use');\n      error = true;\n    }\n    if (this.countName.length <= 0) {\n      this.errorMessage('Your count need a name');\n      error = true;\n    }\n    if (this.userList.length <= 0) {\n      this.errorMessage('Your count need almost one user');\n      error = true;\n    }\n    if (this.currencies.length <= 0) {\n      this.errorMessage('Your count need almost one currency');\n      error = true;\n    }\n\n    if (error === false) {\n      window.countCollection.create({\n        name: this.countName,\n        description: countDescription,\n        users: this.userList,\n        currencies: this.currencies,\n        isPublic: this.isPublic,\n        status: 'active',\n      }, {\n        wait: true,\n        success: function () {\n          app.router.navigate('count/' + countName, {trigger: true});\n        },\n        error: function (xhr) {\n          console.error(xhr);\n          app.router.navigate('', {trigger: true});\n        }\n      });\n    }\n  },\n});\n\nmodule.exports = CountCreationView;\n","var BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\nvar colorSet = require('../../helper/color_set');\n\n/*\n * Base Object for the count creation / updating\n */\nvar CountEditorBase = BaseView.extend({\n  id: 'count-editor-screen',\n\n\n  /*\n   * Add a listener in the changes of the input of name\n   */\n  afterRender: function () {\n    this.$('#input-name')[0].addEventListener('change', (function (_this) {\n      return function (event) {\n        _this.checkCountName(event);\n      };\n    }(this)));\n    if (this.count !== null && this.count.get('isPublic')) {\n      this.setPublic();\n      this.$('#input-public').attr('checked');\n    }\n  },\n\n\n\n  /*\n   * Check if the count name is valid. It can't match with any of the other\n   * count because that would create somes conflicts in the url managements (we\n   * find the counts by the name). For now we check the archive.\n   */\n  checkCountName: function (event) {\n    var countName = event.target.value,\n      nameIsTaken = null,\n      inputGrp = this.$('#input-name-grp');\n\n    // Check the count collection\n    nameIsTaken = window.countCollection.find(function (elem) {\n      return elem.get('name') === countName;\n    });\n\n    // Check the archive collection\n    if (nameIsTaken === undefined) {\n      nameIsTaken = window.archiveCollection.find(function (elem) {\n        return elem.get('name') === countName;\n      });\n    }\n\n    // If name is taken I add an alert\n    if (nameIsTaken !== undefined) {\n      if (!this.nameIsUsed) {\n        inputGrp.addClass('has-error');\n        inputGrp.append('<div id=\"name-used\" class=\"alert alert-danger\"' +\n            ' role=\"alert\">Name already use</div>');\n        this.nameIsUsed = true;\n      }\n    } else {\n      // Else we set the count name\n      if (this.nameIsUsed) {\n        this.$('#name-used').remove();\n        inputGrp.removeClass('has-error');\n        this.nameIsUsed = false;\n      }\n      return countName;\n    }\n  },\n\n\n  errorMessage: function (msg) {\n    this.$('#alert-zone').append('<div class=\"alert alert-danger\"' +\n        ' role=\"alert\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\">' +\n        '&times;</a>' + msg + '</div>');\n  },\n});\n\nmodule.exports = CountEditorBase;\n","var CountEditionBase = require('./count_edition_base');\nvar BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\nvar colorSet = require('../../helper/color_set');\n\n/*\n * Manage the count updating\n */\nvar CountUpdateView = CountEditionBase.extend({\n  id: 'count-editor-screen',\n  template: require('./templates/count_update'),\n  templateUrl: require('./templates/url'),\n\n  events: {\n    'click #submit-editor'  : 'lauchCountUpdate',\n    'click #input-public'   : 'changePublicStatus'\n  },\n\n\n  initialize: function (params) {\n\n    this.count = params.count;\n\n    if (this.count === null || this.count === undefined) {\n      console.error(\"Error: retrieve count update\");\n    }\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  /*\n   * Add a listener in the changes on the input of name. That permit a dynamique\n   * warning.\n   */\n  afterRender: function () {\n    this.$('#input-name')[0].addEventListener('change', (function (_this) {\n      return function (event) {\n        var res = _this.checkCountName(event);\n        if (res !== null) {\n          _this.count.set('name', res);\n        }\n      };\n    }(this)));\n\n    if (this.count !== null && this.count.get('isPublic')) {\n      this.setPublic();\n    }\n  },\n\n\n  /*\n   * Set the variable <this.isPublic> which will set the credential to the futur\n   * access from the public area.\n   */\n  changePublicStatus: function () {\n    if (!this.count.get('isPublic')) {\n      this.setPublic();\n    } else {\n      this.setPrivate();\n    }\n  },\n\n  setPublic: function () {\n    this.count.set('isPublic', true);\n    this.$('#input-public').text('Make this count private');\n    this.$('#public-section').append(this.templateUrl({\n      url: this.createPublicUrl()\n    }));\n  },\n\n\n  setPrivate: function () {\n    this.count.set('isPublic', false);\n    this.$('#input-public').text('Make this count public');\n    this.$('#public-section-body').remove();\n  },\n\n  createPublicUrl: function () {\n\n    if (window.domain === false || window.domain === null ||\n        window.domain === undefined) {\n      return (window.location.origin + '/public/count/' + this.count.id);\n    }\n\n    return (window.domain + '/public/count/' + this.count.id);\n  },\n\n\n\n  getRenderData: function () {\n    if (this.count !== null) {\n      return ({model: this.count.toJSON()});\n    }\n    return ({model: null});\n  },\n\n\n  /*\n   * Lauche an update server side\n   */\n  lauchCountUpdate: function () {\n    this.count.set('description', this.$('#input-description').val());\n\n    this.count.save(this.count.attributes, {\n      error: function (xhr) {\n        console.error('Count update fail: ', xhr);\n      },\n      success: function (data) {\n        app.router.navigate('/count/' + data.get('name'), {trigger: true});\n      }\n    });\n  },\n});\n\nmodule.exports = CountUpdateView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n\nbuf.push(\"<div class=\\\"page-header\\\"><h1>New count</h1><p>A new count is juste a folder where you can put some friends and</p>create a fictional history of who paid what and who owe who.</div><div id=\\\"formular\\\"><div id=\\\"input-name-grp\\\" class=\\\"form-group\\\"><label for=\\\"input-name\\\">Count Name</label><input id=\\\"input-name\\\" type=\\\"text\\\" placeholder=\\\"Name\\\" class=\\\"form-control\\\"/></div><div class=\\\"form-group\\\"><label for=\\\"input-description\\\">Count Description</label><input id=\\\"input-description\\\" type=\\\"text\\\" placeholder=\\\"Description\\\" class=\\\"form-control\\\"/></div><label for=\\\"currency\\\">Count Currencies</label><div id=\\\"currency\\\" class=\\\"form-group\\\"><div id=\\\"currencies-list\\\" data-toggle=\\\"buttons\\\" class=\\\"btn-group\\\"><label class=\\\"btn btn-primary currency\\\"><input type=\\\"checkbox\\\", autocomplete=\\\"off\\\", value=\\\"€\\\"> €</label><label class=\\\"btn btn-primary currency\\\"><input type=\\\"checkbox\\\", autocomplete=\\\"off\\\", value=\\\"$\\\"> $</label></div></div><div class=\\\"form-group\\\"><div id=\\\"list-users\\\" class=\\\"btn-group\\\"></div></div><label for=\\\"input-user-grp\\\">Count Users</label><div id=\\\"input-user-grp\\\" class=\\\"form-group\\\"><div class=\\\"input-group\\\"><form><input id=\\\"input-users\\\" type=\\\"text\\\" placeholder=\\\"My name\\\" class=\\\"form-control\\\"/><span class=\\\"input-group-btn\\\"><input id=\\\"add-user\\\" type=\\\"submit\\\" value=\\\"Add user\\\" class=\\\"btn btn-default\\\"/></span></form></div></div><div id=\\\"name-alert\\\"></div><button id=\\\"submit-editor\\\" class=\\\"btn btn-default\\\">Submit</button></div>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (model) {\nbuf.push(\"<h1>\" + (jade.escape((jade_interp = model.name) == null ? '' : jade_interp)) + \"</h1><form><div class=\\\"form-group\\\"><label for=\\\"input-name\\\">Count Name</label><input id=\\\"input-name\\\" type=\\\"text\\\" placeholder=\\\"Name\\\"\" + (jade.attr(\"value\", \"\" + (model.name) + \"\", true, false)) + \" class=\\\"form-control\\\"/></div><div class=\\\"form-group\\\"><label for=\\\"input-description\\\">Count Description</label><input id=\\\"input-description\\\" type=\\\"text\\\" placeholder=\\\"Description\\\"\" + (jade.attr(\"value\", \"\" + (model.description) + \"\", true, false)) + \" class=\\\"form-control\\\"/></div><div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\">Public</div><div class=\\\"panel-body\\\"><div id=\\\"public-section\\\" class=\\\"col-md-6\\\"><div class=\\\"form-group\\\"><div data-toggle=\\\"buttons\\\" class=\\\"btn-group\\\"><label id=\\\"input-public\\\" class=\\\"btn btn-primary leecher\\\">\");\nif ( model.isPublic)\n{\nbuf.push(\"<input type='checkbox' autocomplete=\\\"off\\\"><Make>this count private</Make>\");\n}\nelse\n{\nbuf.push(\"<input id=\\\"input-public\\\" type='checkbox' autocomplete=\\\"off\\\"> Make this count public\");\n}\nbuf.push(\"</label></div></div></div><div class=\\\"col-md-6\\\"><p>You can make this count public, which mean that everyone who try to</p><access>the address below will see the count and will have the</access><possibility>to modify it.</possibility></div></div></div><button id=\\\"submit-editor\\\" class=\\\"btn btn-default\\\">Submit</button></form>\");}.call(this,\"model\" in locals_for_with?locals_for_with.model:typeof model!==\"undefined\"?model:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (url) {\nbuf.push(\"<div id=\\\"public-section-body\\\"><label for=\\\"public-url\\\">Url to share:</label><p id=\\\"public-url\\\"> \" + (jade.escape((jade_interp = url) == null ? '' : jade_interp)) + \"</p></div>\");}.call(this,\"url\" in locals_for_with?locals_for_with.url:typeof url!==\"undefined\"?url:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","\nvar ViewCollection = require('../../lib/view_collection');\nvar MenuCountRowView = require('./count_row_view');\n\n/*\n * Manage the name of the count in the menu. That's work as a ViewCollection\n * linked to a collection. If you add a model to the collection it will be\n * automatically add to the viewcollection\n */\nvar MenuCountListView = ViewCollection.extend({\n  el: '#menu-list-count',\n\n  itemView: MenuCountRowView,\n\n  /*\n   * Link the viewCollection to the collection\n   */\n  initialize: function (collection) {\n    this.collection = collection;\n    ViewCollection.prototype.initialize.call(this);\n  },\n});\n\nmodule.exports = MenuCountListView;\n","var BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\n/*\n * This view represents an element of the viewCollection countListView\n */\nvar MenuCountRowView = BaseView.extend({\n\n  tagName: 'li',\n\n  /*\n   * Lauch the click listener to render the count\n   */\n  initialize: function () {\n    var self = this;\n    this.$el.click(function () {\n      self.printCount();\n    });\n  },\n\n\n  getRenderData: function () {\n    return {model: this.model.toJSON()};\n  },\n\n  render: function () {\n    var name = this.model.get('name');\n    this.$el.html('<a id=\"count-' + name + '\">' + name + '</a>');\n    this.afterRender();\n    return this;\n  },\n\n\n  /*\n   * Reroute  to the count url -> show the view main page\n   */\n  printCount: function () {\n    app.router.navigate('count/' + this.model.get('name'), {trigger: true});\n  },\n});\n\nmodule.exports = MenuCountRowView;\n","var BaseView = require('../../lib/base_view');\nvar CountListView = require('./count_list_view');\nvar app = require('../../application');\n\n/*\n * Main view for the sidemenu. Contain the viewCollection count_list_view to\n * dynamically create a list of the count name  and redirect to the good url.\n */\nvar MenuView = BaseView.extend({\n  el: '#sidebar',\n\n  events: {\n    'click #menu-all-count' : 'goHomeView',\n    'click #menu-add-count' : 'createNewCount',\n    'click #menu-archives'  : 'goToArchives',\n  },\n\n  /*\n   * Render the list of count in the menu\n   */\n  renderCounts: function () {\n    this.countCollectionView = new CountListView(window.countCollection);\n    this.countCollectionView.render();\n  },\n\n\n  /*\n   * Redirect to the mainBoard\n   */\n  goHomeView: function () {\n    app.router.navigate('', {trigger: true});\n  },\n\n\n  /*\n   * Redirect to the count creation\n   */\n  createNewCount: function () {\n    app.router.navigate('count/create', {trigger: true});\n  },\n\n\n  /*\n   * Redirect to the archive list\n   */\n  goToArchives: function () {\n    app.router.navigate('archive', {trigger: true});\n  },\n\n});\n\nmodule.exports = MenuView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (model) {\nbuf.push(\"<a\" + (jade.attr(\"id\", \"count-\" + (model.name) + \"\", true, false)) + \">\" + (jade.escape((jade_interp = model.name) == null ? '' : jade_interp)) + \"</a>\");}.call(this,\"model\" in locals_for_with?locals_for_with.model:typeof model!==\"undefined\"?model:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var BaseView = require('../../../lib/base_view');\nvar app = require('../../../application');\n\n\n/*\n * View for adding an expense to the count. That is managed in a new\n * view to make easier the history rendering if we add a new expense.\n */\nvar AddExpenseView = BaseView.extend({\n  template: require('./templates/new_expense'),\n  id: 'new-expense',\n\n  count: null,\n\n\n  events: {\n    'click .seeder'             : 'setSeeder',\n    'click .leecher'            : 'setLeecher',\n    'click #add-expense-save'   : 'lauchSaveExpense',\n    'click #add-expense-cancel' : 'resetNewExpense',\n    'click .currency'           : 'setCurrency',\n  },\n\n\n  /*\n   * Find the correct count with the name in attribute. It can be some conflic\n   * in the url if two count have the same name, so be carefule.\n   */\n  initialize: function (attributes) {\n    this.type = attributes.type;\n\n    // Find the count\n    this.count = window.countCollection.models.find(function (count) {\n      return count.get('name') === attributes.countName;\n    });\n\n    // If there is no count, it's a bed url so I redirect to the main page\n    if (this.count === undefined || this.count === null) {\n      console.error('invalide route');\n      app.router.navigate('', {trigger: true});\n    }\n\n    if (this.type !== 'payment') {\n      var leecher = this.count.get('users').map(function (elem) {\n        return {name: elem.name};\n      });\n    }\n\n    this.data = {\n      leecher: leecher,\n      currency: this.count.get('currencies')[0],\n    };\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  getRenderData: function () {\n    return {\n      currencies: this.count.get('currencies'),\n      users: this.count.get('users'),\n      type: this.type\n    };\n  },\n\n  /*\n   * Add all the listener to dynamically check if the inputs are correct\n   */\n  afterRender: function () {\n    this.$('#input-amount')[0].addEventListener('change', (function (_this) {\n      return function (event) {\n        _this.data.amount = event.target.value;\n      };\n    }(this)));\n\n    if (this.type !== 'payment') {\n      this.$('#input-name')[0].addEventListener('change', (function (_this) {\n        return function (event) {\n          _this.data.name = event.target.value;\n        };\n      }(this)));\n\n      this.$('#input-description')[0].addEventListener('change',\n          (function (_this) {\n          return function (event) {\n            _this.data.description = event.target.value;\n          };\n        }(this)));\n    }\n  },\n\n\n  /*\n   * Set the seeder of the expense or \"who paid\"\n   */\n  setSeeder: function (event) {\n    var target = this.$(event.target).children().get(0).value;\n    if (this.data.seeder === target) {\n      this.data.seeder = null;\n    } else {\n      this.data.seeder = target;\n    }\n  },\n\n\n  /*\n   * Set the leechers of the expense or \"who take part\"\n   */\n  setLeecher: function (event) {\n      var target = this.$(event.target).children().get(0).value,\n        listLeecher = this.data.leecher,\n        leecherIndex = null;\n\n    if (this.type !== 'payment') {\n      listLeecher.find(function (element, index) {\n        if (element.name === target) {\n          leecherIndex = index;\n          return true;\n        }\n        return false;\n      });\n\n      if (leecherIndex === null) {\n        listLeecher.push({name: target});\n      } else {\n        listLeecher.splice(leecherIndex, 1);\n      }\n    } else {\n      this.data.leecher = [{name: target}];\n    }\n  },\n\n\n  /*\n   * Set the currency of the expense\n   */\n  setCurrency: function (event) {\n    this.data.currency = event.target.text;\n    this.$('#choose-currency').text(this.data.currency);\n  },\n\n\n    /*\n     * Check if all inputs are correct and print an alert if it's not, else call\n     * sendNewExpense()\n     */\n  lauchSaveExpense: function () {\n    var data = this.data,\n      error = false;\n\n    this.$('#alert-zone').remove();\n    this.$('#add-expense-displayer').prepend('<div id=\"alert-zone\"></div>');\n    if (this.type !== 'payment') {\n      if (data.name === null || data.name === undefined) {\n        this.errorMessage('Your expense need a name');\n        error = true;\n      }\n    }\n    if (data.seeder === null || data.seeder === undefined) {\n      this.errorMessage('One person must paid');\n      error = true;\n    }\n    if (data.amount === undefined) {\n      this.errorMessage('You haven\\'t set a amount');\n      error = true;\n    } else if (data.amount <= 0) {\n      this.errorMessage('The amount must be positive');\n      error = true;\n    }\n    if (data.leecher.length === 0) {\n      this.errorMessage('You must choose almost one persone who get benefice');\n      error = true;\n    }\n\n\n    if (this.type === 'payment') {\n      if (data.leecher[0].name === data.seeder) {\n        this.errorMessage('You must choose 2 differentes user');\n        error = true;\n      }\n      this.data.name = data.leecher[0].name + ' repayed ' + data.seeder;\n    }\n\n\n    if (error === false) {\n      this.sendNewExpense();\n    }\n  },\n\n\n  /*\n   * Generique function to trigger an alert.\n   */\n  errorMessage: function (msg) {\n    this.$('#alert-zone').append('<div class=\"alert alert-danger\"' +\n        ' role=\"alert\">' + msg + '</div>');\n  },\n\n\n  /*\n   * Make all computations to create the set of data to create the bunch of data\n   * needer to each expense. I had lost of issues with the number wiche a some\n   * time manage as string so I cast everything as Number to be sure.\n   *\n   * The (Math.round(Num1 +/- Num2) * 100) / 100)toFixed(2) is use to manage the\n   * round.\n   */\n  sendNewExpense: function () {\n    var self = this,\n      newExpensesList = this.count.get('expenses'),\n      allUsers = this.count.get('users'),\n      newAllExpenses = null,\n      leechPerUser = null;\n\n\n    newExpensesList.push(this.data);\n\n    this.data.id = Date.now() + Math.round(Math.random() % 100);\n\n    allUsers.every(function (user) {\n      if (self.data.seeder === user.name) {\n        user.seed = (Math.round((Number(self.data.amount) +\n                Number(user.seed)) * 100) / 100).toFixed(2);\n        return false;\n      }\n      return true;\n    });\n\n    leechPerUser = (Math.round(Number(this.data.amount) /\n          Number(this.data.leecher.length) * 100) / 100).toFixed(2);\n    this.data.leecher.forEach(function (elem) {\n      allUsers.every(function (user) {\n        if (elem.name === user.name) {\n          user.leech = +(Math.round((Number(leechPerUser) +\n                  Number(user.leech)) * 100) / 100).toFixed(2);\n          return false;\n        }\n        return true;\n      });\n    });\n\n    newAllExpenses = (Math.round((Number(this.count.get('allExpenses'))\n            + Number(this.data.amount)) * 100) / 100).toFixed(2);\n    this.count.save({\n      allExpenses: newAllExpenses,\n      expenses: newExpensesList,\n      users: allUsers,\n    }, {\n      wait: true,\n      success: function (data) {\n        app.router.navigate('/count/' + self.count.get('name'),\n            {trigger: true});\n      },\n    });\n  },\n\n  resetNewExpense: function () {\n    app.router.navigate('/count/' + this.count.get('name'), {trigger: true});\n  },\n});\n\nmodule.exports = AddExpenseView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n;var locals_for_with = (locals || {});(function (currencies, type, undefined, users) {\nbuf.push(\"<form id=\\\"add-expense-displayer\\\" class=\\\"form-group\\\"><div id=\\\"alert-zone\\\"></div><div class=\\\"form-group\\\"></div>\");\nif ( type != 'payment')\n{\nbuf.push(\"<label for=\\\"input-name\\\">Expense Name</label><input id=\\\"input-name\\\" type=\\\"text\\\" placeholder=\\\"Shopping...\\\" maxlength=\\\"40\\\" required=\\\"required\\\" autofocus=\\\"autofocus\\\" class=\\\"form-control\\\"/><div class=\\\"form-group\\\"><label for=\\\"input-description\\\">Expense Description</label><textarea id=\\\"input-description\\\" rows=\\\"5\\\" class=\\\"form-control\\\"></textarea></div>\");\n}\nif ( type == 'payment')\n{\nbuf.push(\"<label for=\\\"input-name\\\">Payment</label>\");\n}\nbuf.push(\"<div class=\\\"form-group\\\"><label for=\\\"input-amount\\\">Amount</label><div class=\\\"input-group\\\"><input id=\\\"input-amount\\\" type=\\\"number\\\" placeholder=\\\"42.21\\\" aria-label=\\\"...\\\" required=\\\"required\\\" class=\\\"form-control\\\"/><div class=\\\"input-group-btn\\\"><button id=\\\"choose-currency\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\" class=\\\"btn btn-default dropdown-toggle\\\">\" + (jade.escape((jade_interp = currencies[0].name) == null ? '' : jade_interp)) + \"</button><ul class=\\\"dropdown-menu dropdown-menu-right\\\">\");\n// iterate currencies\n;(function(){\n  var $$obj = currencies;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var currency = $$obj[$index];\n\nbuf.push(\"<li class=\\\"currency\\\"><a>\" + (jade.escape((jade_interp = currency.name) == null ? '' : jade_interp)) + \"</a></li>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var currency = $$obj[$index];\n\nbuf.push(\"<li class=\\\"currency\\\"><a>\" + (jade.escape((jade_interp = currency.name) == null ? '' : jade_interp)) + \"</a></li>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</ul></div></div></div>\");\nif ( type != 'payment')\n{\nbuf.push(\"<label for=\\\"seeder-list\\\">Who Paid ?</label>\");\n}\nif ( type == 'payment')\n{\nbuf.push(\"<label for=\\\"seeder-list\\\">Who Repaid ?</label>\");\n}\nbuf.push(\"<div class=\\\"form-group\\\"><div id=\\\"seeder-list\\\" data-toggle=\\\"buttons\\\" class=\\\"btn-group\\\">\");\n// iterate users\n;(function(){\n  var $$obj = users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<label class=\\\"btn btn-primary seeder\\\"><input type='radio', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<label class=\\\"btn btn-primary seeder\\\"><input type='radio', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div>\");\nif ( type != 'payment')\n{\nbuf.push(\"<label for=\\\"leecher-list\\\">Who take Part ?</label>\");\n}\nif ( type == 'payment')\n{\nbuf.push(\"<label for=\\\"leecher-list\\\">Who is Repayed ?</label>\");\n}\nbuf.push(\"<div class=\\\"form-group\\\"><div id=\\\"leecher-list\\\" data-toggle=\\\"buttons\\\" class=\\\"btn-group\\\">\");\n// iterate users\n;(function(){\n  var $$obj = users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nif ( type != 'payment')\n{\nbuf.push(\"<label class=\\\"btn btn-primary leecher active\\\"><input type='checkbox', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n}\nif ( type == 'payment')\n{\nbuf.push(\"<label class=\\\"btn btn-primary leecher\\\"><input type='radio', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n}\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nif ( type != 'payment')\n{\nbuf.push(\"<label class=\\\"btn btn-primary leecher active\\\"><input type='checkbox', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n}\nif ( type == 'payment')\n{\nbuf.push(\"<label class=\\\"btn btn-primary leecher\\\"><input type='radio', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n}\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div><div class=\\\"form-group\\\"><button id=\\\"add-expense-save\\\" type=\\\"submit\\\" class=\\\"btn btn-primary btn-block\\\">Save</button><button id=\\\"add-expense-cancel\\\" class=\\\"btn btn-primary btn-block\\\">Cancel</button></div></form>\");}.call(this,\"currencies\" in locals_for_with?locals_for_with.currencies:typeof currencies!==\"undefined\"?currencies:undefined,\"type\" in locals_for_with?locals_for_with.type:typeof type!==\"undefined\"?type:undefined,\"undefined\" in locals_for_with?locals_for_with.undefined:typeof undefined!==\"undefined\"?undefined:undefined,\"users\" in locals_for_with?locals_for_with.users:typeof users!==\"undefined\"?users:undefined));;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}"]}