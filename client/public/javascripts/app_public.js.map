{"version":3,"sources":["app/public/application.js","app/public/collections/count_list.js","app/public/helper/color_set.js","app/public/initialize.js","app/public/lib/base_view.js","app/public/lib/socket.js","app/public/models/count.js","app/public/router.js","app/public/views/count/count_base_view.js","app/public/views/count/count_view.js","app/public/views/count/square_view.js","app/public/views/count/stats_view.js","app/public/views/count/templates/count.jade","app/public/views/count/templates/square.jade","app/public/views/newEvent/expense/new_expense_view.js","app/public/views/newEvent/expense/templates/new_expense.jade"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnzvxnvpFA;AAAA","file":"public/javascripts/app_public.js","sourcesContent":["// Application bootstrapper.\nvar Application = {\n  initialize: function () {\n\n    var Router = require('./router');\n\n    // Router initialization\n    this.router = new Router();\n\n\n    if (typeof Object.freeze === 'function') {\n      Object.freeze(this);\n    }\n  }\n};\n\nmodule.exports = Application;\n","var Count = require('../models/count');\n\nvar CountList = Backbone.Collection.extend({\n  model: Count,\n  url: 'count',\n});\n\nmodule.exports = CountList;\n","module.exports = [\n  '2979FF',\n  'B3C51D',\n  '00D5B8',\n  'FF5700',\n  'F819AA',\n  '7190AB',\n  '00B0FF',\n  'E70505',\n  'FF7900',\n  '51658D',\n  '304FFE',\n  '00DCE9',\n  'FF2828',\n  '6200EA',\n  '64DD17',\n  '00C853',\n  'FFA300',\n];\n","var application = require('./application');\n\n$(function () {\n  application.initialize();\n\n  Backbone.history.start();\n});\n","\n// Base class for all views.\nvar BaseView = Backbone.View.extend({\n  initialize: function () {\n    this.render = _.bind(this.render, this);\n  },\n\n  template: function () { return null; },\n  getRenderData: function () { return null; },\n\n  render: function () {\n    this.$el.html(this.template(this.getRenderData()));\n    this.afterRender();\n    return this;\n  },\n\n  afterRender: function () { return null; }\n});\n\nmodule.exports = BaseView;\n","/*global\n CozySocketListener\n */\nvar Count = require('../models/count');\nvar CountView = require('../views/count/count_view');\nvar app = require('../application');\n\nfunction SocketListener() {\n  // Parent constructor\n  CozySocketListener.call(this);\n}\n\nCozySocketListener.prototype.models = {\n  'shared-count': Count\n};\n\nCozySocketListener.prototype.events = [\n  'shared-count.update'\n];\n\nSocketListener.prototype = Object.create(CozySocketListener.prototype);\n\n\nSocketListener.prototype.onRemoteUpdate = function (model, collection) {\n  var printModel = app.router.mainView.count,\n    view = null;\n\n  if (printModel.id === model.id) {\n    view = new CountView({countName: printModel.get('name')});\n    app.router.displayView(view);\n  }\n};\n\nmodule.exports = SocketListener;\n","\nvar app = require('../application');\n\nvar Count = Backbone.Model.extend({\n\n  removeExpense: function (id) {\n    var newExpenses = this.get('expenses'),\n      currentExpenses = this.get('allExpenses'),\n      index = null,\n      expenseRemove = null,\n      leecherList = null,\n      seeder = null,\n      newUsersList = null,\n      newAllExpenses = null;\n\n\n    index = this.get('expenses').findIndex(function (elem) {\n      if (elem.id === id) {\n        return true;\n      }\n      return false;\n    });\n\n    expenseRemove = newExpenses.splice(index, 1)[0];\n\n    leecherList = expenseRemove.leecher;\n    seeder = expenseRemove.seeder;\n\n    newUsersList = this.get('users').map(function (user) {\n      leecherList.every(function (expenseUser) {\n        if (user.name === expenseUser.name) {\n          var leechPerUser = (Math.round(Number(expenseRemove.amount) /\n                Number(expenseRemove.leecher.length) * 100) / 100).toFixed(2);\n          user.leech = (Math.round((Number(user.leech) - leechPerUser) * 100) /\n              100).toFixed(2);\n          return false;\n        }\n        return true;\n      });\n\n      if (user.name === seeder) {\n        user.seed = (Math.round((Number(user.seed) -\n                Number(expenseRemove.amount)) * 100) / 100).toFixed(2);\n      }\n      return user;\n    });\n\n    newAllExpenses = (Math.round((Number(currentExpenses) -\n            Number(expenseRemove.amount)) * 100) / 100).toFixed(2);\n\n    this.save({\n      expenses: newExpenses,\n      allExpenses: newAllExpenses,\n      users: newUsersList\n    }, {\n      url: '/public/count/' + this.id,\n      wait: true,\n      error: function (xhr) {\n        console.error(xhr);\n      }\n    });\n  },\n\n\n});\n\nmodule.exports = Count;\n","\n// View screen\nvar CountView = require('./views/count/count_view');\nvar NewExpense = require('./views/newEvent/expense/new_expense_view');\n\n// Models\nvar Count = require('./models/count');\nvar CountList = require('./collections/count_list');\nvar SocketListener = require('./lib/socket');\n\nvar Router = Backbone.Router.extend({\n\n  mainView: null,\n\n  /*\n   * I Fetch all the data from the server in during the router initialization\n   * because for now there is no much data and it's easy to print any page.\n   *\n   * The main HTML is already render server side, be remain the count list\n   */\n  initialize: function () {\n\n    window.countCollection = new CountList();\n    window.countCollection.add(new Count(window.count));\n\n    this.count = window.countCollection.models[0];\n\n    this.socket = new SocketListener();\n    this.socket.watch(window.countCollection);\n\n    Backbone.Router.prototype.initialize.call(this);\n  },\n\n\n  routes: {\n    ''                  : 'printCount',\n    'new-expense'       : 'newExpense',\n  },\n\n\n  /*\n   * Screen for create a new expense\n   */\n  newExpense: function (countName) {\n    var view = new NewExpense({countName: countName});\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Count printer\n   */\n  printCount: function () {\n    var view = new CountView({countName: this.count.get('name')});\n\n    this.displayView(view);\n  },\n\n\n  /*\n   * Generique function to manage view printing, must be call if you want print\n   * a screen\n   */\n  displayView: function (view) {\n    if (this.mainView !== null && this.mainView !== undefined) {\n      this.mainView.remove();\n    }\n    this.mainView = view;\n    $('#content-screen').append(view.$el);\n    view.render();\n  },\n});\n\nmodule.exports = Router;\n","// Requirements\nvar BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\n// Modules\nvar StatsView = require('./stats_view');\nvar SquareView = require('./square_view');\n\n\n/*\n * CountBaseView is a generique class wiche is call in count and archive. There\n * are both exactly the same stucture but just more or less actions\n */\nvar CountBaseView = BaseView.extend({\n  template: require('./templates/count'),\n\n\n  /*\n   * If count is undefined that mean I haven't find it in the collection so it's\n   * a bad url. I redirect to the mainBoard\n   */\n  initialize: function () {\n    if (this.count === undefined || this.count === null) {\n      console.error('invalide route');\n      app.router.navigate('', {trigger: true});\n    }\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  /*\n   * Call in render in BaseView class. Render the data to the template\n   */\n  getRenderData: function () {\n    if (this.count !== null && this.count !== undefined) {\n      var expensePerUser = +(Math.round(this.count.get('allExpenses') /\n            this.count.get('users').length * 100) / 100).toFixed(2);\n\n      return ({\n        count: this.count.toJSON(),\n        expensePerUser: expensePerUser\n      });\n    }\n  },\n\n\n  /*\n   * Render stats module\n   */\n  afterRender: function () {\n    if (this.count.get('expenses').length > 0) {\n      this.stats = new StatsView({count: this.count});\n      this.stats.render();\n    }\n\n  },\n\n\n  /*\n   * The balancing is by default not printed so I don't create it unless it's\n   * required.\n   */\n  printBalancing: function () {\n    if (this.balancing === null || this.balancing === undefined) {\n      this.balancing = new SquareView({count: this.count});\n      this.balancing.render();\n    }\n    this.balancing.clickDisplayer();\n  },\n});\n\nmodule.exports = CountBaseView;\n","var CountBaseView = require('./count_base_view');\nvar app = require('../../application');\n\nvar colorSet = require('../../helper/color_set');\n\n\n\n/*\n * The base view for the ACTIVE count, based on the countBaseView class\n */\nvar CountView = CountBaseView.extend({\n  id: 'count-screen',\n\n  count: null,\n  dataResume: {\n    allExpense: 0,\n  },\n\n  newExpense: null,\n  balancing: null,\n\n  events: {\n    'click #count-lauch-add-user'   : 'addUser',\n    'click #add-new-expense'        : 'lauchNewExpense',\n    'click .header-expense-elem'    : 'printTransferBody',\n    'click .delete-expense-elem'    : 'deleteExpense',\n    'click #header-balancing'       : 'printBalancing',\n  },\n\n\n  /*\n   * If we are in 'cozy navigation' we get the name of the class and\n   * check in the collection if he can find it. Else if we are in public\n   * navigation there must be juste one count available, set in the router\n   */\n  initialize: function (attributes) {\n    this.count = app.router.count;\n\n    console.log('id: ', this.count.id);\n    CountBaseView.prototype.initialize.call(this);\n  },\n\n\n  /*\n   * All the process for add a user in the count\n   */\n  addUser: function () {\n    var userList = this.count.get('users'),\n      newUser = this.$('#count-input-add-user').val(),\n      color = colorSet[userList.length % colorSet.length],\n      nameIsTaken = null;\n\n    if (newUser.length === 0) {\n      return;\n    }\n    // Remove precedent alert\n    this.$('#alert-name').remove();\n\n    // Check if the name is taker\n    nameIsTaken = userList.find(function (elem) {\n      return elem.name === newUser;\n    });\n\n    // Print an alert and quit if the name is taken\n    if (nameIsTaken !== undefined) {\n      this.$('#name-alert').append('<div id=\"alert-name\" class=\"alert' +\n          'alert-danger\" role=\"alert\"><a href=\"#\" class=\"close\"' +\n          'data-dismiss=\"alert\">&times;</a>Name already taken</div>');\n      return;\n    }\n\n    // Add the name to the userlist if not taken\n    userList.push({name: newUser, seed: 0, leech: 0, color: color});\n    // Add the user button to  userlist\n    this.$('#user-list').append('<div class=\"row\"><button class=\"btn\"' +\n        'style=\"background-color: #' + color + '\">' + newUser +\n        '</button></div>');\n\n    // Save the new list of user\n    this.count.save({users: userList}, {\n      url: '/public/count/' + this.count.id,\n    });\n\n    // Empty the user input\n    this.$('#count-input-add-user').val('');\n\n    // Update the is it printe\n    if (this.balancing !== null && this.balancing !== undefined) {\n      this.balancing.update();\n    }\n  },\n\n\n  /*\n   * The new expense editor is manage in a new page in order to make this page\n   * lighter in code and informations. It's also easier we re-render the count\n   * with the new data so we haven't to handle this manually.\n   */\n  lauchNewExpense: function (event) {\n    app.router.navigate('/new-expense', {trigger: true});\n  },\n\n\n  /*\n   * Remove an expense\n   */\n  removeNewExpense: function () {\n    this.newExpense.remove();\n    delete this.newExpense;\n    this.newExpense = null;\n\n    // Remove the div\n    this.$('#module').prepend('<button id=\"add-new-expense\" ' +\n        'class=\"btn btn-default btn-block\"> Add a new expense</button>');\n  },\n\n\n  /*\n   * Print expand or remove data body of an element of the history\n   */\n  printTransferBody: function (event) {\n    var elem =  $(event.target),\n      expenseBody = null;\n\n    if (elem.is('span')) {\n      expenseBody =  $(event.target).parent().next('div');\n    } else {\n      expenseBody =  $(event.target).next('div');\n    }\n\n    if (expenseBody.is('.printed')) {\n      expenseBody.slideUp('slow');\n      expenseBody.removeClass('printed');\n    } else {\n      expenseBody.slideDown('slow');\n      expenseBody.addClass('printed');\n    }\n  },\n\n\n  /*\n   * Remove a history element and update the stats\n   */\n  deleteExpense: function (event) {\n    var id = Number(this.$(event.target).parent().attr('id'));\n\n    this.count.removeExpense(id);\n  },\n});\n\nmodule.exports = CountView;\n","/*jslint plusplus: true */\nvar BaseView = require('../../lib/base_view');\nvar app = require('../../application');\n\n/*\n * Specific view Wiche manage the balancing module.\n */\nvar SquareView = BaseView.extend({\n  id: 'square-view',\n  template: require('./templates/square'),\n\n\n  events: {\n    'click #archive-count': 'archive',\n  },\n\n\n  initialize: function (attributes) {\n    this.count = attributes.count;\n\n    this.setUsersBalancing();\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  render: function () {\n    $('#module-balancing').prepend(this.$el);\n    this.$el.html(this.template({users: this.usersBalancing,\n      squareMoves: this.squareMoves}));\n    this.$('#square-displayer').slideDown('slow');\n\n  },\n\n\n  /*\n   * Print or remove the body of the balancing module\n   */\n  clickDisplayer: function () {\n    var displayer = this.$('#square-displayer');\n\n    if (displayer.is('.printed')) {\n      displayer.slideUp('slow');\n      displayer.removeClass('printed');\n    } else {\n      displayer.slideDown('slow');\n      displayer.addClass('printed');\n    }\n  },\n\n\n  /*\n   * Update and rerender the balancing\n   */\n  update: function () {\n    this.setUsersBalancing();\n    this.setSquareMoves();\n    this.remove();\n    this.render();\n  },\n\n\n  /*\n   * Create an array with the name, color and balancing of each user\n   */\n  setUsersBalancing: function () {\n    var users = this.count.get('users');\n\n    this.usersBalancing = users.map(function (user) {\n      return {\n        name: user.name,\n        color: user.color,\n        balancing: (Math.round((user.seed - user.leech) * 100) / 100).toFixed(2)\n      };\n    });\n\n    this.setSquareMoves();\n  },\n\n\n  /*\n   * Calcule each moves to balancing the count\n   */\n  setSquareMoves: function () {\n    this.squareMoves = [];\n\n    // copy the userBalancing array\n    var tmpUsers = JSON.parse(JSON.stringify(this.usersBalancing)),\n      i = 0,\n      leecher = null,\n      indexLeecher = null,\n      seeder = null,\n      index = null,\n      exchange = null,\n      indexSeeder = null;\n\n    /*\n     * The main loop: in each loop we find the biggest leecher and the biggest\n     * seeder and we equalise between their. If one of them have is balancing to\n     * 0 I remove it.\n     *\n     * Repeate the loop while it stay 1 or less user. If one user stay it's the\n     * a \"lost\", I can't redistribute to any user. The goal it's to make this\n     * lost tinier possible. For now it's max \"0.01 * (nb or user -1)\"\n     */\n    while (tmpUsers.length > 1 && i++ < 50) {\n      leecher = null;\n      indexLeecher = 0;\n\n      // Find the biggest leecher\n      for (index = 0; index < tmpUsers.length; index++) {\n        if (leecher === null || (leecher.balancing > tmpUsers[index].balancing\n              && leecher !== tmpUsers[index])) {\n          leecher = {\n            name: tmpUsers[index].name,\n            balancing: Number(tmpUsers[index].balancing)\n          };\n          indexLeecher = index;\n        }\n      }\n\n      seeder = null;\n      indexSeeder = 0;\n\n      // Find the biggest seeder\n      for (index = 0; index < tmpUsers.length; index++) {\n        if (seeder === null || (seeder.balancing < tmpUsers[index].balancing\n              && seeder !== tmpUsers[index])) {\n          seeder = {\n            name: tmpUsers[index].name,\n            balancing: Number(tmpUsers[index].balancing)\n          };\n          indexSeeder = index;\n        }\n      }\n\n      // Set the amount I can send from the leecher to the seeder to equalize a\n      // max\n      if (leecher.balancing * -1 > seeder.balancing) {\n        exchange = seeder.balancing;\n      } else {\n        exchange = -leecher.balancing;\n      }\n\n      // Set the new balancin\n      seeder.balancing = (Math.round((seeder.balancing - exchange) * 100) /\n          100).toFixed(2);\n      leecher.balancing = (Math.round((leecher.balancing + exchange) * 100) /\n          100).toFixed(2);\n\n      // Add the exchange to the list of exchanges\n      if (exchange !== 0 && exchange !== 'NaN') {\n        this.squareMoves.push({\n          from: leecher.name,\n          to: seeder.name,\n          exchange: exchange\n        });\n      }\n\n      // Remove the leecher of the seeder if their balancing is equal to 0\n      if (leecher.balancing === 0) {\n        tmpUsers.splice(indexLeecher, 1);\n      }\n      if (seeder.balancing === 0) {\n        tmpUsers.splice(indexSeeder, 1);\n      }\n    }\n  },\n\n\n  /*\n   * Archive a count\n   */\n  archive: function (event) {\n    this.count.archive();\n  },\n\n\n  resetSquare: function () {\n    this.trigger('remove-module');\n  },\n});\n\nmodule.exports = SquareView;\n","/*global\n Chart\n */\nvar BaseView = require('../../lib/base_view');\n\n\n/*\n * Manage all stats in stats module\n */\nvar StatsView = BaseView.extend({\n  el: '#stats-module',\n\n\n  initialize: function (attributes) {\n    this.count = attributes.count;\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n\n  /*\n   * Create the pie chart and reder it\n   */\n  render: function () {\n    var chartCtx = this.$('#chart-users').get(0).getContext(\"2d\"),\n      data = this.computeDataCount();\n\n    this.pieChart = new Chart(chartCtx).Pie(data);\n  },\n\n\n  /*\n   * Compute data needed for the pie chart. We don't add the user with 0 seed\n   * because the update don't work from 0 to X value.\n   */\n  computeDataCount: function () {\n    var data = [];\n    this.count.get('users').forEach(function (elem) {\n      if (Number(elem.seed) !== 0) {\n        data.push({value: elem.seed, color: '#' +\n          elem.color, label: elem.name});\n      }\n    });\n    return data;\n  },\n\n\n  /*\n   * Update the value of the pie chart\n   */\n  update: function () {\n    var allExpenses = Number(this.count.get('allExpenses')),\n      nbUsers = Number(this.count.get('users').length),\n      perUserExpenses = +(Math.round(allExpenses / nbUsers * 100) / 100)\n        .toFixed(2),\n      self = this;\n\n\n    // Update the numbers of the general state (to the right of the pie chart)\n    this.$('#nb-expenses').text(this.count.get('expenses').length);\n    this.$('#all-expenses').text(allExpenses);\n    this.$('#perUser-expenses').text(perUserExpenses);\n\n    /*\n     * Main loop wiche I update/ create data to the pie chart\n     */\n    this.count.get('users').forEach(function (user, indexUser) {\n      var indexPie = null;\n      // For each user we looking him in the data of the pie chart\n      self.pieChart.segments.find(function (pieSegment, index) {\n        if (pieSegment.label === user.name) {\n          indexPie = index;\n          return true;\n        }\n        return false;\n      });\n      // If we find it we update the chart with the new data in the segment\n      if (indexPie !== undefined && indexPie !== null) {\n        if (user.seed === 0) {\n          self.pieChart.removeData(indexPie);\n        } else {\n          self.pieChart.segments[indexPie].value = user.seed;\n          self.pieChart.update();\n        }\n        // If not we create a new segment\n      } else {\n        self.pieChart.addData({\n          value: user.seed,\n          color: '#' + user.color,\n          label: user.name\n        });\n      }\n    });\n  },\n\n});\n\nmodule.exports = StatsView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\nvar locals_ = (locals || {}),count = locals_.count,expensePerUser = locals_.expensePerUser;\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-body\\\"><div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\">Users</div><div class=\\\"panel-body\\\"><div id=\\\"stats-module\\\"><div class=\\\"col-md-4\\\"><div id=\\\"user-list\\\" class=\\\"col-md-12\\\">\");\n// iterate count.users\n;(function(){\n  var $$obj = count.users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<div class=\\\"row\\\"><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button></div>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<div class=\\\"row\\\"><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</button></div>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div>\");\nif ( count.status == 'active')\n{\nbuf.push(\"<div id=\\\"name-alert\\\" class=\\\"row col-md-12\\\"><div class=\\\"input-group\\\"><form action=\\\"#\\\"><input id=\\\"count-input-add-user\\\" type=\\\"text\\\" placeholder=\\\"My name\\\" class=\\\"form-control\\\"/><span class=\\\"input-group-btn\\\"><input id=\\\"count-lauch-add-user\\\" type=\\\"submit\\\" value=\\\"Add user\\\" class=\\\"btn btn-default\\\"/></span></form></div></div>\");\n}\nbuf.push(\"</div><div id=\\\"canvas-block\\\" class=\\\"col-md-4 col-xs-6\\\"><h4>Expenses per users</h4><canvas id=\\\"chart-users\\\" width=\\\"150\\\" height=\\\"150\\\"></canvas></div></div><div class=\\\"col-md-4 col-xs-6\\\"><label for=\\\"all-expenses\\\">All Expenses:</label><p id=\\\"all-expenses\\\">\" + (jade.escape((jade_interp = count.allExpenses) == null ? '' : jade_interp)) + \"</p><label for=\\\"nb-expenses\\\">Number Expenses:</label><p id=\\\"nb-expenses\\\">\" + (jade.escape((jade_interp = count.expenses.length) == null ? '' : jade_interp)) + \"</p><label for=\\\"nb-expenses\\\">Expenses per user:</label><p id=\\\"perUser-expenses\\\">\" + (jade.escape((jade_interp = expensePerUser) == null ? '' : jade_interp)) + \"</p></div></div>\");\nif ( (count.status == 'active'))\n{\nbuf.push(\"<div class=\\\"btn-group btn-block\\\"><button id=\\\"add-new-expense\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" class=\\\"btn btn-lg btn-success btn-block\\\"><span>&nbsp;Add an expense&nbsp;</span></button></div>\");\n}\nbuf.push(\"</div><div class=\\\"panel panel-primary\\\"><div id=\\\"header-balancing\\\" class=\\\"panel-heading\\\"><span class=\\\"caret\\\"></span><span>&nbsp;Balancing</span></div><div id=\\\"module-balancing\\\"></div></div><div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\">History</div><div class=\\\"panel-body\\\"><div id=\\\"expense-list-view\\\">\");\nif ( count.expenses.length == 0)\n{\nbuf.push(\"<span id=\\\"empty-history\\\">Your history is empty</span>\");\n}\nelse\n{\n// iterate count.expenses\n;(function(){\n  var $$obj = count.expenses;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var expense = $$obj[$index];\n\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-heading header-expense-elem\\\"><span class=\\\"caret\\\"></span><span> \" + (jade.escape((jade_interp = expense.name) == null ? '' : jade_interp)) + \"</span><span style=\\\"float: right\\\">\" + (jade.escape((jade_interp = expense.amount) == null ? '' : jade_interp)) + \" \" + (jade.escape((jade_interp = expense.currency.name) == null ? '' : jade_interp)) + \"</span></div><div style=\\\"display: none\\\"\" + (jade.attr(\"id\", \"\" + (expense.id) + \"\", true, false)) + \" class=\\\"panel-body\\\"><label for=\\\"seeder\\\">Who have paid ?</label><div id=\\\"seeder\\\"></div><button class=\\\"btn\\\">\" + (jade.escape((jade_interp = expense.seeder) == null ? '' : jade_interp)) + \"</button><div class=\\\"form-group\\\"><label for=\\\"leecher-list\\\">Who contribute ?</label><div id=\\\"leecher-list\\\" class=\\\"form-group\\\">\");\n// iterate expense.leecher\n;(function(){\n  var $$obj = expense.leecher;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div><button class=\\\"btn btn-default btn-block delete-expense-elem\\\">Delete</button></div></div>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var expense = $$obj[$index];\n\nbuf.push(\"<div class=\\\"panel panel-default\\\"><div class=\\\"panel-heading header-expense-elem\\\"><span class=\\\"caret\\\"></span><span> \" + (jade.escape((jade_interp = expense.name) == null ? '' : jade_interp)) + \"</span><span style=\\\"float: right\\\">\" + (jade.escape((jade_interp = expense.amount) == null ? '' : jade_interp)) + \" \" + (jade.escape((jade_interp = expense.currency.name) == null ? '' : jade_interp)) + \"</span></div><div style=\\\"display: none\\\"\" + (jade.attr(\"id\", \"\" + (expense.id) + \"\", true, false)) + \" class=\\\"panel-body\\\"><label for=\\\"seeder\\\">Who have paid ?</label><div id=\\\"seeder\\\"></div><button class=\\\"btn\\\">\" + (jade.escape((jade_interp = expense.seeder) == null ? '' : jade_interp)) + \"</button><div class=\\\"form-group\\\"><label for=\\\"leecher-list\\\">Who contribute ?</label><div id=\\\"leecher-list\\\" class=\\\"form-group\\\">\");\n// iterate expense.leecher\n;(function(){\n  var $$obj = expense.leecher;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var leecher = $$obj[$index];\n\nbuf.push(\"<button class=\\\"btn\\\">\" + (jade.escape((jade_interp = leecher.name) == null ? '' : jade_interp)) + \"</button>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div><button class=\\\"btn btn-default btn-block delete-expense-elem\\\">Delete</button></div></div>\");\n    }\n\n  }\n}).call(this);\n\n}\nbuf.push(\"</div></div></div></div></div>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\nvar locals_ = (locals || {}),users = locals_.users,squareMoves = locals_.squareMoves;\nbuf.push(\"<div id=\\\"square-displayer\\\" style=\\\"display: none\\\" class=\\\"panel-body\\\"><label for=\\\"balancing\\\">Balancing:</label><ul id=\\\"balancing\\\">\");\n// iterate users\n;(function(){\n  var $$obj = users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<li><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \":</button>\");\nif ( user.balancing == 0)\n{\nbuf.push(\"<span style=\\\"color: blue\\\">&nbsp;ok</span>\");\n}\nif ( user.balancing > 0)\n{\nbuf.push(\"<span style=\\\"color: green\\\">&nbsp;+\" + (jade.escape((jade_interp = user.balancing) == null ? '' : jade_interp)) + \"</span>\");\n}\nif ( user.balancing < 0)\n{\nbuf.push(\"<span style=\\\"color: red\\\">&nbsp;\" + (jade.escape((jade_interp = user.balancing) == null ? '' : jade_interp)) + \"</span>\");\n}\nbuf.push(\"</li>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<li><button\" + (jade.attr(\"style\", \"background-color: #\" + (user.color) + \"\", true, false)) + \" class=\\\"btn\\\">\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \":</button>\");\nif ( user.balancing == 0)\n{\nbuf.push(\"<span style=\\\"color: blue\\\">&nbsp;ok</span>\");\n}\nif ( user.balancing > 0)\n{\nbuf.push(\"<span style=\\\"color: green\\\">&nbsp;+\" + (jade.escape((jade_interp = user.balancing) == null ? '' : jade_interp)) + \"</span>\");\n}\nif ( user.balancing < 0)\n{\nbuf.push(\"<span style=\\\"color: red\\\">&nbsp;\" + (jade.escape((jade_interp = user.balancing) == null ? '' : jade_interp)) + \"</span>\");\n}\nbuf.push(\"</li>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</ul><label for=\\\"balancing\\\">How to be square:</label><ul id=\\\"square\\\">\");\n// iterate squareMoves\n;(function(){\n  var $$obj = squareMoves;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var move = $$obj[$index];\n\nbuf.push(\"<li>[\" + (jade.escape((jade_interp = move.from) == null ? '' : jade_interp)) + \"] gave [\" + (jade.escape((jade_interp = move.exchange) == null ? '' : jade_interp)) + \"] to [\" + (jade.escape((jade_interp = move.to) == null ? '' : jade_interp)) + \"]</li>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var move = $$obj[$index];\n\nbuf.push(\"<li>[\" + (jade.escape((jade_interp = move.from) == null ? '' : jade_interp)) + \"] gave [\" + (jade.escape((jade_interp = move.exchange) == null ? '' : jade_interp)) + \"] to [\" + (jade.escape((jade_interp = move.to) == null ? '' : jade_interp)) + \"]</li>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</ul></div>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var BaseView = require('../../../lib/base_view');\nvar app = require('../../../application');\n\n\n/*\n * View for adding an expense to the count. That's manage in a new view to make\n * more easy the history rendering if we add a new expense.\n */\nvar AddExpenseView = BaseView.extend({\n  template: require('./templates/new_expense'),\n  id: 'new-expense',\n\n  count: null,\n\n\n  events: {\n    'click .seeder'             : 'setSeeder',\n    'click .leecher'            : 'setLeecher',\n    'click #add-expense-save'   : 'lauchSaveExpense',\n    'click #add-expense-cancel' : 'resetNewExpense',\n    'click .currency'           : 'setCurrency',\n  },\n\n\n  /*\n   * Find the correct count with the name in attribute. It can be some conflic\n   * in the url if two count have the same name, so be carefule.\n   */\n  initialize: function (attributes) {\n\n    // Find the count\n    this.count = app.router.count;\n\n      // If there is no count, it's a bed url so I redirect to the main page\n    if (this.count === undefined || this.count === null) {\n      console.error('invalide route');\n      app.router.navigate('', {trigger: true});\n    }\n\n    var leecher = this.count.get('users').map(function (elem) {\n      return {name: elem.name};\n    });\n\n    this.data = {\n      leecher: leecher,\n      currency: this.count.get('currencies')[0],\n    };\n\n    BaseView.prototype.initialize.call(this);\n  },\n\n\n  getRenderData: function () {\n    return {\n      currencies: this.count.get('currencies'),\n      users: this.count.get('users'),\n    };\n  },\n\n  /*\n   * Add all the listener to dynamically check if the inputs are correct\n   */\n  afterRender: function () {\n    this.$('#input-amount')[0].addEventListener('change', (function (_this) {\n      return function (event) {\n        _this.data.amount = event.target.value;\n      };\n    }(this)));\n\n    this.$('#input-name')[0].addEventListener('change', (function (_this) {\n      return function (event) {\n        _this.data.name = event.target.value;\n      };\n    }(this)));\n\n    this.$('#input-description')[0].addEventListener('change',\n        (function (_this) {\n        return function (event) {\n          _this.data.description = event.target.value;\n        };\n      }(this)));\n  },\n\n\n  /*\n   * Set the seeder of the expense or \"who paid\"\n   */\n  setSeeder: function (event) {\n    var target = this.$(event.target).children().get(0).value;\n    if (this.data.seeder === target) {\n      this.data.seeder = null;\n    } else {\n      this.data.seeder = target;\n    }\n  },\n\n\n  /*\n   * Set the leechers of the expense or \"who take part\"\n   */\n  setLeecher: function (event) {\n    var target = this.$(event.target).children().get(0).value,\n      listLeecher = this.data.leecher,\n      leecherIndex = null;\n\n    listLeecher.find(function (element, index) {\n      if (element.name === target) {\n        leecherIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (leecherIndex === null) {\n      listLeecher.push({name: target});\n    } else {\n      listLeecher.splice(leecherIndex, 1);\n    }\n  },\n\n\n  /*\n   * Set the currency of the expense\n   */\n  setCurrency: function (event) {\n    this.data.currency = event.target.text;\n    this.$('#choose-currency').text(this.data.currency);\n  },\n\n\n    /*\n     * Check if all inputs are correct and print an alert if it's not, else call\n     * sendNewExpense()\n     */\n  lauchSaveExpense: function () {\n    var data = this.data,\n      error = false;\n\n    this.$('#alert-zone').remove();\n    this.$('#add-expense-displayer').prepend('<div id=\"alert-zone\"></div>');\n    if (data.name === null || data.name === undefined) {\n      this.errorMessage('Your expense need a name');\n      error = true;\n    }\n    if (data.seeder === null || data.seeder === undefined) {\n      this.errorMessage('One person must paid');\n      error = true;\n    }\n    if (data.amount === undefined) {\n      this.errorMessage('You haven\\'t set a amount');\n      error = true;\n    } else if (data.amount <= 0) {\n      this.errorMessage('The amount must be positive');\n      error = true;\n    }\n    if (data.leecher.length === 0) {\n      this.errorMessage('You must choose almost one persone who get benefice');\n      error = true;\n    }\n    if (error === false) {\n      this.sendNewExpense();\n    }\n  },\n\n\n  /*\n   * Generique function to trigger an alert.\n   */\n  errorMessage: function (msg) {\n    this.$('#alert-zone').append('<div class=\"alert alert-danger\"' +\n        ' role=\"alert\">' + msg + '</div>');\n  },\n\n\n  /*\n   * Make all cacules to create the set of data to create the bunch of data\n   * needer to each expense. I had lost of issues with the number wiche a some\n   * time manage as string so I cast everything as Number to be sure.\n   *\n   * The (Math.round(Num1 +/- Num2) * 100) / 100)toFixed(2) is use to manage the\n   * round.\n   */\n  sendNewExpense: function () {\n    var self = this,\n      newExpensesList = this.count.get('expenses'),\n      allUsers = null,\n      newAllExpenses = null,\n      leechPerUser = null;\n\n    newExpensesList.push(this.data);\n\n    this.data.id = Date.now() + Math.round(Math.random() % 100);\n\n    allUsers = this.count.get('users');\n    allUsers.every(function (user) {\n      if (self.data.seeder === user.name) {\n        user.seed = (Math.round((Number(self.data.amount) + Number(user.seed))\n              * 100) / 100).toFixed(2);\n        return false;\n      }\n      return true;\n    });\n\n    leechPerUser = (Math.round(Number(this.data.amount) /\n          Number(this.data.leecher.length) * 100) / 100).toFixed(2);\n    this.data.leecher.forEach(function (elem) {\n      allUsers.every(function (user) {\n        if (elem.name === user.name) {\n          user.leech = +(Math.round((Number(leechPerUser) +\n                  Number(user.leech)) * 100) / 100).toFixed(2);\n          return false;\n        }\n        return true;\n      });\n    });\n\n    newAllExpenses = (Math.round((Number(this.count.get('allExpenses')) +\n            Number(this.data.amount)) * 100) / 100).toFixed(2);\n    this.count.save({\n      allExpenses: newAllExpenses,\n      expenses: newExpensesList,\n      users: allUsers,\n    }, {\n      url: '/public/count/' + this.count.id,\n      wait: true,\n      success: function (data) {\n        app.router.navigate('/', {trigger: true});\n      },\n    });\n  },\n\n  resetNewExpense: function () {\n    app.router.navigate('/', {trigger: true});\n  },\n});\n\nmodule.exports = AddExpenseView;\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\nvar locals_ = (locals || {}),currencies = locals_.currencies,users = locals_.users;\nbuf.push(\"<form id=\\\"add-expense-displayer\\\" class=\\\"form-group\\\"><div id=\\\"alert-zone\\\"></div><label for=\\\"input-name\\\">Expense Name</label><input id=\\\"input-name\\\" type=\\\"text\\\" placeholder=\\\"Shopping...\\\" maxlength=\\\"40\\\" required=\\\"required\\\" autofocus=\\\"autofocus\\\" class=\\\"form-control\\\"/><div class=\\\"form-group\\\"><label for=\\\"input-description\\\">Expense Description</label><textarea id=\\\"input-description\\\" rows=\\\"5\\\" class=\\\"form-control\\\"></textarea></div><div class=\\\"form-group\\\"><label for=\\\"input-amount\\\">Amount</label><div class=\\\"input-group\\\"><input id=\\\"input-amount\\\" type=\\\"number\\\" placeholder=\\\"42.21\\\" aria-label=\\\"...\\\" required=\\\"required\\\" class=\\\"form-control\\\"/><div class=\\\"input-group-btn\\\"><button id=\\\"choose-currency\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\" class=\\\"btn btn-default dropdown-toggle\\\">\" + (jade.escape((jade_interp = currencies[0].name) == null ? '' : jade_interp)) + \"</button><ul class=\\\"dropdown-menu dropdown-menu-right\\\">\");\n// iterate currencies\n;(function(){\n  var $$obj = currencies;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var currency = $$obj[$index];\n\nbuf.push(\"<li class=\\\"currency\\\"><a>\" + (jade.escape((jade_interp = currency.name) == null ? '' : jade_interp)) + \"</a></li>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var currency = $$obj[$index];\n\nbuf.push(\"<li class=\\\"currency\\\"><a>\" + (jade.escape((jade_interp = currency.name) == null ? '' : jade_interp)) + \"</a></li>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</ul></div></div></div><label for=\\\"seeder-list\\\">Who Paid ?</label><div class=\\\"form-group\\\"><div id=\\\"seeder-list\\\" data-toggle=\\\"buttons\\\" class=\\\"btn-group\\\">\");\n// iterate users\n;(function(){\n  var $$obj = users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<label class=\\\"btn btn-primary seeder\\\"><input type='radio', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<label class=\\\"btn btn-primary seeder\\\"><input type='radio', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div><label for=\\\"leecher-list\\\">Who take Part ?</label><div class=\\\"form-group\\\"><div id=\\\"leecher-list\\\" data-toggle=\\\"buttons\\\" class=\\\"btn-group\\\">\");\n// iterate users\n;(function(){\n  var $$obj = users;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var user = $$obj[$index];\n\nbuf.push(\"<label class=\\\"btn btn-primary leecher active\\\"><input type='checkbox', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var user = $$obj[$index];\n\nbuf.push(\"<label class=\\\"btn btn-primary leecher active\\\"><input type='checkbox', autocomplete='off', value=\\\"\" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"\\\"> \" + (jade.escape((jade_interp = user.name) == null ? '' : jade_interp)) + \"</label>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div></div><div class=\\\"form-group\\\"><button id=\\\"add-expense-save\\\" type=\\\"submit\\\" class=\\\"btn btn-primary btn-block\\\">Save</button><button id=\\\"add-expense-cancel\\\" class=\\\"btn btn-primary btn-block\\\">Cancel</button></div></form>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}"]}